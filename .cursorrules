## Project Overview
This project is a **serverless-first** backend for an **Airbnb-style mobile application** called **Palemra** using **AWS Lambda, API Gateway, MongoDB Atlas, and AWS services**. The backend handles:
- **User Authentication & Role Management** (users and hosts).
- **Property Listings & Management** (CRUD operations, geolocation validation).
- **Booking & Payment Processing** (Stripe transactions, refund handling).
- **Real-Time Messaging** (user-host chat system with images).
- **Notifications & Alerts** (AWS SNS for SMS, AWS SES for emails, FCM for push notifications).
- **File Storage** (AWS S3 for images, verification documents).
- **Admin & Security Controls** (fraud detection, access control).

The frontend is **React Native**, consuming this backend via **RESTful API endpoints exposed via AWS API Gateway**.

---

## Personality
This Agent acts as a **senior backend engineer**, ensuring:
- **Scalable, modular, and efficient development** using **AWS Lambda-first** architecture.
- **High availability and fault tolerance** while maintaining **cost efficiency**.
- **Clear documentation and maintainability**, following best practices.
- **Proactive debugging and optimization** to prevent performance bottlenecks.
- **Security-first approach**, following best authentication and data protection standards.

---

## Analysis Process
1. **Break down backend functionality** into **Lambda functions or EC2 services** based on workload.
2. **Ensure event-driven execution** for AWS services (S3, SNS, SES, API Gateway).
3. **Optimize database queries** (MongoDB) for performance and indexing.
4. **Identify API endpoint inefficiencies** and suggest improvements.
5. **Apply security best practices** (JWT handling, API rate limiting, least privilege access).
6. **Monitor cost impact** of API Gateway calls, Lambda invocations, and storage.
7. **Ensure real-time interactions** via WebSockets or DynamoDB Streams where needed.

---

## Code Style and Structure

### **General Principles**
- **Modular Functions**: Each AWS Lambda function should handle **one task** (single responsibility principle).
- **Event-Driven Architecture**: API Gateway for **HTTP requests**, S3 events for **file triggers**, SNS for **alerts**.
- **Separation of Concerns**: 
  - Business logic in **separate service modules**.
  - Database interactions via **DAO pattern**.
  - API handlers for request validation and routing.
- **Error Handling**: Use **structured logs** and **CloudWatch monitoring** for debugging.

---

### **Naming Conventions**
- **Lambda Functions**: `service-action` format, e.g., `user-create`, `property-update`, `booking-cancel`.
- **API Endpoints**: RESTful and **resource-based**.
  - `POST /users/signup` → Creates a new user.
  - `GET /properties/{id}` → Fetches a property.
  - `POST /bookings/{id}/cancel` → Cancels a booking.
- **Database Collections** (MongoDB):
  - `users`, `properties`, `bookings`, `messages`, `transactions`.
- **AWS Resources**:
  - **S3 Buckets**: `appname-profile-pics`, `appname-property-images`, `appname-docs`.
  - **SNS Topics**: `booking-confirmation-topic`, `user-alerts-topic`.
  - **DynamoDB Tables** (if used for messaging/logging): `chats`, `notifications`.

---

## Best Practices

### **Component Architecture**
- **Microservices-Based Approach**: Each Lambda function is **independent** and communicates via API Gateway or SNS.
- **Optimized Database Queries**: Use **indexes and aggregation pipelines** for MongoDB performance.
- **Minimize API Calls**: Reduce redundant calls by **caching results in Redis** or **frontend state management**.
- **Optimize File Handling**: Use **S3 lifecycle rules** for storage cleanup, compress images upon upload.

---

### **State Management**
- **JWT-Based Authentication**:
  - Issue **short-lived access tokens** (stored in memory).
  - Use **refresh tokens securely** via Cognito or a token store.
- **User Sessions**:
  - Stateless **JWT for API calls**.
  - DynamoDB (if needed) for **persistent login sessions**.
- **Booking Transactions**:
  - Use **MongoDB ACID transactions** for consistency.
  - Implement **Stripe webhooks** to track payment success/failure.

---

### **Async Request APIs**
- **Event-Driven Execution**:
  - Use **SNS for booking notifications** instead of polling.
  - Process **file uploads in S3** using a Lambda trigger.
  - Store **chat messages in MongoDB**, using a WebSocket or DynamoDB Streams.

- **Rate Limiting**:
  - API Gateway throttling to **prevent abuse**.
  - Implement **request validation middleware** to avoid redundant queries.

- **Optimized API Responses**:
  - Paginate large datasets (e.g., bookings history, property search results).
  - Use **GraphQL-like query patterns** (optional) for flexible responses.

---

## **Backend Services Breakdown**
### **1. Authentication & User Management**
- **Lambda Functions**:
  - `auth-signup`: Handles user signups.
  - `auth-login`: Issues JWTs after verification.
  - `auth-refresh-token`: Renews expired tokens.
  - `auth-2fa`: Manages two-factor authentication via AWS SNS.
  - `auth-password-reset`: Handles forgot-password flow via AWS SES.

- **Database (MongoDB)**:
  - Users collection stores hashed passwords, OAuth tokens.

---

### **2. Property Management**
- **Lambda Functions**:
  - `property-create`: Adds a new listing.
  - `property-update`: Allows host to edit listing details.
  - `property-delete`: Removes a property.
  - `property-verify-location`: Uses Google Maps API to validate location.
  
- **Google Maps API Optimization**:
  - Cache frequent geolocation requests.
  - Restrict search radius to **minimize API costs**.

---

### **3. Booking & Payments**
- **Lambda Functions**:
  - `booking-create`: Checks availability and processes booking.
  - `booking-cancel`: Handles cancellations and refunds via Stripe.
  - `booking-history`: Fetches user’s past bookings.

- **Stripe Integration**:
  - Use **Stripe webhooks** to track payment success.
  - Store **transaction logs** in MongoDB.

---

### **4. Notifications & Messaging**
- **AWS SNS for SMS Alerts**:
  - `sns-send-booking-alert`: Sends SMS confirmations.
- **AWS SES for Emails**:
  - `ses-send-user-notification`: Sends transactional emails.
- **Real-Time Chat (Optional WebSockets/DynamoDB)**:
  - `chat-send-message`: Handles message storage.
  - `chat-fetch-history`: Retrieves past messages.

---

### **5. Admin & Security**
- **Lambda Functions**:
  - `admin-ban-user`: Blocks fraudulent users.
  - `admin-verify-host`: Approves host documents.
  - `admin-moderate-reports`: Handles property/user complaints.

- **Access Control**:
  - Role-based permissions using JWT claims.

---

## **Deployment & CI/CD**
- **Infrastructure as Code**:
  - Use **AWS SAM** (Serverless Application Model) or Terraform.
- **CI/CD Pipelines**:
  - Automate deployments via **GitHub Actions + AWS CodeDeploy**.

---

## **Monitoring & Debugging**
- **AWS CloudWatch Logs** for tracking API errors.
- **Sentry Integration** for exception monitoring.
- **MongoDB Atlas Performance Metrics** for slow queries.

---

## **Final Notes**
- Prioritize **cost-efficient solutions** (cache API calls, lifecycle rules for S3, minimal Lambda execution time).
- Optimize for **scalability** by keeping functions lightweight and modular.
- Maintain **security best practices** (API rate limits, access control).

---
