openapi: 3.0.0
info:
  title: Palmera Authentication API
  description: Authentication and authorization endpoints for the Palmera platform
  version: 1.0.0
  contact:
    name: Palmera Support
    email: support@palmera.com

servers:
  - url: https://api.palmera.com/auth
    description: Production server
  - url: https://dev-api.palmera.com/auth
    description: Development server
  - url: http://localhost:3000/auth
    description: Local development server

paths:
  /signup:
    post:
      summary: Create a new user account
      description: Register a new user with email, password, and personal information
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - phone
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 8
                  description: User's password (minimum 8 characters)
                  example: "securePassword123"
                firstName:
                  type: string
                  description: User's first name
                  example: "John"
                lastName:
                  type: string
                  description: User's last name
                  example: "Doe"
                phone:
                  type: string
                  pattern: '^\+[1-9]\d{1,14}$'
                  description: User's phone number in international format
                  example: "+1234567890"
      responses:
        '201':
          description: User account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "550e8400-e29b-41d4-a716-446655440000"
                      personalInfo:
                        type: object
                        properties:
                          email:
                            type: string
                            example: "john.doe@example.com"
                          firstName:
                            type: string
                            example: "John"
                          lastName:
                            type: string
                            example: "Doe"
                          phone:
                            type: string
                            example: "+1234567890"
                      roles:
                        type: object
                        properties:
                          isHost:
                            type: boolean
                            example: false
                          isSuperhost:
                            type: boolean
                            example: false
                          isAdmin:
                            type: boolean
                            example: false
                      accountStatus:
                        type: object
                        properties:
                          status:
                            type: string
                            example: "active"
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Validation error: Email must be a valid email address"
        '409':
          description: Email or phone number already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Email address is already registered"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Database connection failed"

  /login:
    post:
      summary: Authenticate user with email and password
      description: Login with email and password to receive access and refresh tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: User's password
                  example: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "550e8400-e29b-41d4-a716-446655440000"
                          personalInfo:
                            type: object
                            properties:
                              email:
                                type: string
                                example: "john.doe@example.com"
                              firstName:
                                type: string
                                example: "John"
                              lastName:
                                type: string
                                example: "Doe"
                              phone:
                                type: string
                                example: "+1234567890"
                          roles:
                            type: object
                            properties:
                              isHost:
                                type: boolean
                                example: false
                              isSuperhost:
                                type: boolean
                                example: false
                              isAdmin:
                                type: boolean
                                example: false
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Validation error or invalid JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Validation error: Email must be a valid email address"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid email or password"
        '403':
          description: Account suspended or deactivated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Account has been suspended. Please contact support."
        '500':
          description: Authentication service error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Authentication service error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Database connection failed"

  /google:
    post:
      summary: Authenticate with Google OAuth
      description: Login or register using Google OAuth token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idToken
              properties:
                idToken:
                  type: string
                  description: Google ID token from client
                  example: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ..."
      responses:
        '200':
          description: Google authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "550e8400-e29b-41d4-a716-446655440000"
                          personalInfo:
                            type: object
                            properties:
                              email:
                                type: string
                                example: "john.doe@gmail.com"
                              firstName:
                                type: string
                                example: "John"
                              lastName:
                                type: string
                                example: "Doe"
                              phone:
                                type: string
                                nullable: true
                          profile:
                            type: object
                            properties:
                              picture:
                                type: string
                                nullable: true
                                example: "https://lh3.googleusercontent.com/a/ACg8ocJ..."
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Validation error or missing email
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Email is required from Google account"
        '401':
          description: Invalid or expired Google token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Google token has expired"
        '403':
          description: Account suspended or deactivated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Account has been suspended. Please contact support."
        '409':
          description: User account already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "User account already exists"
        '500':
          description: Internal server error or Google client configuration error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid Google client configuration"

  /otp/send:
    post:
      summary: Send OTP to phone number
      description: Send a 6-digit OTP to the provided phone number for verification
      tags:
        - OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
              properties:
                phone:
                  type: string
                  pattern: '^\+[1-9]\d{10,15}$'
                  description: Phone number in international format
                  example: "+1234567890"
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "OTP sent successfully"
                      phone:
                        type: string
                        example: "+1234567890"
        '400':
          description: Invalid phone number format
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Phone number validation error: Phone must match pattern /^\\+\\d{10,15}$/"
        '429':
          description: Rate limit exceeded or OTP already sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "OTP already sent. Please wait 60 seconds before requesting another."
        '503':
          description: SMS service error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "SMS service error. Please try again later."

  /otp/verify:
    post:
      summary: Verify OTP and authenticate user
      description: Verify the 6-digit OTP and authenticate the user
      tags:
        - OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - otp
              properties:
                phone:
                  type: string
                  description: Phone number used to send OTP
                  example: "+1234567890"
                otp:
                  type: string
                  minLength: 6
                  maxLength: 6
                  description: 6-digit OTP code
                  example: "123456"
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "OTP verified successfully"
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "550e8400-e29b-41d4-a716-446655440000"
                          personalInfo:
                            type: object
                            properties:
                              email:
                                type: string
                                example: "john.doe@example.com"
                              firstName:
                                type: string
                                example: "John"
                              lastName:
                                type: string
                                example: "Doe"
                              phone:
                                type: string
                                example: "+1234567890"
                          roles:
                            type: object
                            properties:
                              isHost:
                                type: boolean
                                example: false
                              isSuperhost:
                                type: boolean
                                example: false
                              isAdmin:
                                type: boolean
                                example: false
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Validation error or invalid OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid OTP. Please check and try again."
        '404':
          description: OTP not found or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "No OTP found for this phone number. Please request a new OTP."
        '410':
          description: OTP expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "OTP has expired. Please request a new OTP."
        '403':
          description: Account suspended or deactivated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Account has been suspended. Please contact support."
        '500':
          description: Authentication service error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Authentication service error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Database connection failed"

  /refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using a valid refresh token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      expiresIn:
                        type: integer
                        example: 3600
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Validation error: Refresh token is required"
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Refresh token has expired"
        '403':
          description: Account suspended or deactivated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Account has been suspended. Please contact support."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "User not found"
        '500':
          description: Authentication service error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Authentication service error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Database connection failed"

  /logout:
    post:
      summary: Logout user
      description: Invalidate the current access token and remove refresh tokens
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Logged out successfully"
                      tokensRemoved:
                        type: integer
                        example: 1
        '401':
          description: Missing or invalid authorization header
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Authorization header is required"
        '500':
          description: Failed to logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Failed to logout. Please try again."
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Database connection failed"

  /delete-account:
    delete:
      summary: Delete user account
      description: Permanently delete the authenticated user's account and all associated data
      tags:
        - Account Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Account deleted successfully"
                      userDeleted:
                        type: boolean
                        example: true
                      tokensRemoved:
                        type: integer
                        example: 3
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Authentication required"
        '403':
          description: Admin accounts cannot be deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Admin accounts cannot be deleted"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "User not found"
        '500':
          description: Failed to delete account
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Failed to delete account. Please try again."
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Database connection failed"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: Response data

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: OTP
    description: One-time password verification endpoints
  - name: Account Management
    description: Account management endpoints 