openapi: 3.0.0
info:
  title: Palmera Backend API
  description: Complete API documentation for all Palmera backend services
  version: 1.0.0
  contact:
    name: Palmera Support
    email: support@palmera.com

paths:
  # Auth Service Endpoints
  /auth/login:
    servers:
      - url: https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
        description: Auth Service
    post:
      summary: Demo Login for Access Token (dev)
      description: |
        Authenticate a user and receive an access token and refresh token. This endpoint is for development/demo purposes only. Use the provided credentials to obtain a JWT for testing other endpoints. 
        
        **Note:** This is not for production use.
        
        **Base URL:** https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "test_mail1@gmail.com"
              password: "password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                success: true
                message: "Login successful"
                data:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyMTIzIiwicm9sZSI6InVzZXIiLCJpYXQiOjE2MzQ1Njc4OTAsImV4cCI6MTYzNDU3MTQ5MH0.example"
                  refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyMTIzIiwidHlwZSI6InJlZnJlc2giLCJpYXQiOjE2MzQ1Njc4OTAsImV4cCI6MTYzNDY1NDI5MH0.example"
                  user:
                    _id: "user123"
                    email: "user@example.com"
                    firstName: "John"
                    lastName: "Doe"
                    role: "user"
                    status: "active"
                    createdAt: "2024-01-01T00:00:00.000Z"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingBody:
                  summary: Request body is required
                  value:
                    success: false
                    error: "Request body is required"
                invalidJSON:
                  summary: Invalid JSON in request body
                  value:
                    success: false
                    error: "Invalid JSON in request body"
                validationError:
                  summary: Validation error
                  value:
                    success: false
                    error: "Validation error: Email is required"
                invalidEmail:
                  summary: Invalid email format
                  value:
                    success: false
                    error: "Invalid email format"
                invalidPassword:
                  summary: Invalid password format
                  value:
                    success: false
                    error: "Invalid password format"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid email or password"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /auth/signup:
    servers:
      - url: https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
        description: Auth Service
    post:
      summary: User registration
      description: |
        Create a new user account with email and password.
        
        **Base URL:** https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
            example:
              email: "newuser@example.com"
              password: "password123"
              firstName: "Jane"
              lastName: "Smith"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                success: true
                message: "User created successfully"
                data:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyMTI0Iiwicm9sZSI6InVzZXIiLCJpYXQiOjE2MzQ1Njc4OTAsImV4cCI6MTYzNDU3MTQ5MH0.example"
                  refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyMTI0IiwidHlwZSI6InJlZnJlc2giLCJpYXQiOjE2MzQ1Njc4OTAsImV4cCI6MTYzNDY1NDI5MH0.example"
                  user:
                    _id: "user124"
                    email: "newuser@example.com"
                    firstName: "Jane"
                    lastName: "Smith"
                    role: "user"
                    status: "active"
                    createdAt: "2024-01-01T00:00:00.000Z"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingBody:
                  summary: Request body is required
                  value:
                    success: false
                    error: "Request body is required"
                invalidJSON:
                  summary: Invalid JSON in request body
                  value:
                    success: false
                    error: "Invalid JSON in request body"
                validationError:
                  summary: Validation error
                  value:
                    success: false
                    error: "Validation error: Password must be at least 6 characters long"
                invalidPassword:
                  summary: Invalid password format
                  value:
                    success: false
                    error: "Invalid password format"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User with this email already exists"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /auth/send-otp:
    servers:
      - url: https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
        description: Auth Service
    post:
      summary: Send OTP
      description: |
        Send a one-time password (OTP) to the provided phone number for verification.
        
        **Base URL:** https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phoneNumber]
              properties:
                phoneNumber:
                  type: string
            example:
              phoneNumber: "+1234567890"
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "OTP sent successfully to +1234567890"
                data:
                  phoneNumber: "+1234567890"
                  expiresIn: 300
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingBody:
                  summary: Request body is required
                  value:
                    success: false
                    error: "Request body is required"
                invalidJSON:
                  summary: Invalid JSON in request body
                  value:
                    success: false
                    error: "Invalid JSON in request body"
                invalidPhoneNumber:
                  summary: Invalid phone number format
                  value:
                    success: false
                    error: "Invalid phone number format"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to send OTP"

  /auth/verify-otp:
    servers:
      - url: https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
        description: Auth Service
    post:
      summary: Verify OTP
      description: |
        Verify the OTP sent to the phone number.
        
        **Base URL:** https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phoneNumber, otp]
              properties:
                phoneNumber:
                  type: string
                otp:
                  type: string
            example:
              phoneNumber: "+1234567890"
              otp: "123456"
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Phone number verified successfully"
                data:
                  phoneNumber: "+1234567890"
                  verified: true
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingBody:
                  summary: Request body is required
                  value:
                    success: false
                    error: "Request body is required"
                invalidJSON:
                  summary: Invalid JSON in request body
                  value:
                    success: false
                    error: "Invalid JSON in request body"
                invalidOTP:
                  summary: Invalid OTP code
                  value:
                    success: false
                    error: "Invalid OTP code"
        '404':
          description: OTP not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "OTP not found or expired"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /auth/refresh-token:
    servers:
      - url: https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
        description: Auth Service
    post:
      summary: Refresh access token
      description: |
        Refresh an expired access token using a valid refresh token.
        
        **Base URL:** https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
            example:
              refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyMTIzIiwidHlwZSI6InJlZnJlc2giLCJpYXQiOjE2MzQ1Njc4OTAsImV4cCI6MTYzNDY1NDI5MH0.example"
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
              example:
                success: true
                message: "Token refreshed successfully"
                data:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyMTIzIiwicm9sZSI6InVzZXIiLCJpYXQiOjE2MzQ1NzE0OTAsImV4cCI6MTYzNDU3NTA5MH0.example"
                  refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyMTIzIiwidHlwZSI6InJlZnJlc2giLCJpYXQiOjE2MzQ1NzE0OTAsImV4cCI6MTYzNDY1Nzg5MH0.example"
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid or expired refresh token"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /auth/logout:
    servers:
      - url: https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
        description: Auth Service
    post:
      summary: User logout
      description: |
        Logout the current user and invalidate their tokens.
        
        **Base URL:** https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Logout successful"
                data:
                  loggedOut: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /auth/delete-account:
    servers:
      - url: https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
        description: Auth Service
    delete:
      summary: Delete user account
      description: |
        Permanently delete the user's account and all associated data.
        
        **Base URL:** https://m71ar6e3f9.execute-api.us-east-1.amazonaws.com/dev
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Account deleted successfully"
                data:
                  userId: "user123"
                  deletedAt: "2024-01-01T00:00:00.000Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  # Users Service Endpoints
  /users/{id}:
    servers:
      - url: https://ct4rgp2633.execute-api.us-east-1.amazonaws.com/dev
        description: Users Service
    get:
      summary: Get user profile
      description: Retrieve a user's complete profile information.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      message:
                        type: string
                        example: "User retrieved successfully"
        '400':
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid user ID format"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
    put:
      summary: Update user profile
      description: Update a user's personal information.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: User's first name
                lastName:
                  type: string
                  description: User's last name
                email:
                  type: string
                  format: email
                  description: User's email address
                phone:
                  type: string
                  description: User's phone number
                dateOfBirth:
                  type: string
                  format: date
                  description: User's date of birth
                address:
                  type: object
                  description: User's address information
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
                    country:
                      type: string
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "User updated successfully"
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Check-out date must be after check-in date"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '409':
          description: Email or phone number already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Email or phone number is already in use"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /users/{id}/preferences:
    servers:
      - url: https://ct4rgp2633.execute-api.us-east-1.amazonaws.com/dev
        description: Users Service
    get:
      summary: Get user preferences
      description: Retrieve a user's preferences and settings.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: User preferences retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      preferences:
                        $ref: '#/components/schemas/UserPreferences'
                      message:
                        type: string
                        example: "User preferences retrieved successfully"
        '400':
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid user ID format"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
    post:
      summary: Update user preferences
      description: Update a user's preferences and settings.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
            example:
              notification:
                email: true
                sms: false
                push: true
              currency: "USD"
              language: "en"
              searchFilters:
                maxPrice: 500
                propertyTypes: ["apartment", "house"]
                amenities: ["wifi", "parking"]
                distance: 10
      responses:
        '200':
          description: User preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      preferences:
                        $ref: '#/components/schemas/UserPreferences'
                      message:
                        type: string
                        example: "User preferences updated successfully"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Check-out date must be after check-in date"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /users/{id}/saved-locations:
    servers:
      - url: https://ct4rgp2633.execute-api.us-east-1.amazonaws.com/dev
        description: Users Service
    get:
      summary: Get saved locations
      description: Retrieve a user's saved/favorite property locations.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: Saved locations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      savedLocations:
                        type: array
                        items:
                          type: string
                        description: Array of saved property IDs
                      count:
                        type: integer
                      message:
                        type: string
                        example: "User saved locations retrieved successfully"
        '400':
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid user ID format"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
    post:
      summary: Save locations
      description: Save multiple property locations to user's favorites.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - favoriteProperties
              properties:
                favoriteProperties:
                  type: array
                  items:
                    type: string 

                  description: Array of property IDs to save
      responses:
        '200':
          description: Locations saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "User saved items updated successfully"
                      savedCount:
                        type: integer
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Check-out date must be after check-in date"
        '404':
          description: User not found or properties not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found or properties not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
  /users/{id}/saved-locations/{locationId}:
    servers:
      - url: https://ct4rgp2633.execute-api.us-east-1.amazonaws.com/dev
        description: Users Service
    delete:
      summary: Delete saved location
      description: Remove a specific property from user's saved locations.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          description: Property ID to remove
          schema:
            type: string
      responses:
        '200':
          description: Location deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Deleted user saved location successfully"
                      deletedLocationId:
                        type: string
                      remainingCount:
                        type: integer
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Invalid parameters"
        '404':
          description: User not found or location not in saved locations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found or location not in saved locations"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /users/{id}/subscription:
    servers:
      - url: https://ct4rgp2633.execute-api.us-east-1.amazonaws.com/dev
        description: Users Service
    get:
      summary: Get subscription status
      description: Retrieve a user's subscription information.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: Subscription retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      subscription:
                        $ref: '#/components/schemas/UserSubscription'
                      message:
                        type: string
                        example: "User subscription retrieved successfully"
        '400':
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid user ID format"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
    post:
      summary: Update subscription
      description: Update a user's subscription plan.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
      responses:
        '200':
          description: Subscription updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      subscription:
                        $ref: '#/components/schemas/UserSubscription'
                      message:
                        type: string
                        example: "User subscription updated successfully"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Check-out date must be after check-in date"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /users/{id}/role:
    servers:
      - url: https://ct4rgp2633.execute-api.us-east-1.amazonaws.com/dev
        description: Users Service
    post:
      summary: Change user role
      description: Change a user's role between guest and host.
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
        - name: role
          in: query
          required: true
          description: New role for the user. Must be one of: user, host, admin.
          schema:
            type: string
            enum: [user, host, admin]
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "User role updated successfully"
                      newRole:
                        type: string
        '400':
          description: Bad request - validation error or host verification pending
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingRole:
                  summary: Role parameter is required
                  value:
                    success: false
                    error: "Role parameter is required"
                invalidRole:
                  summary: Role must be either 'host' or 'guest'
                  value:
                    success: false
                    error: "Role must be either 'host' or 'guest'"
                hostVerificationPending:
                  summary: Host verification pending
                  value:
                    success: false
                    error: "Host verification pending. Please complete host verification before changing to host role."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  # Properties Service Endpoints
  /properties/search:
    servers:
      - url: https://fk0ojke7ka.execute-api.us-east-1.amazonaws.com/dev
        description: Properties Service
    get:
      summary: Search properties
      description: Search for properties with filters. All query params are optional.
      tags: [Properties]
      parameters:
        - name: location
          in: query
          schema:
            type: string
          description: Address substring to match
        - name: min_price
          in: query
          schema:
            type: number
          description: Minimum price per night
        - name: max_price
          in: query
          schema:
            type: number
          description: Maximum price per night
        - name: amenities
          in: query
          schema:
            type: string
          description: Comma-separated list of amenities (e.g. wifi,parking)
        - name: property_type
          in: query
          schema:
            type: string
            enum: ["Entire place", "Private room", "Shared room"]
          description: Property type
        - name: status
          in: query
          schema:
            type: string
            enum: ["active", "pending", "inactive"]
          description: Property status
        - name: availability_start
          in: query
          schema:
            type: string
            format: date
          description: Start date for availability (YYYY-MM-DD)
        - name: availability_end
          in: query
          schema:
            type: string
            format: date
          description: End date for availability (YYYY-MM-DD)
      responses:
        '200':
          description: Properties found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Found 2 properties matching your criteria"
                data:
                  properties:
                    - _id: "prop123"
                      host_id: "user123"
                      host:
                        _id: "user123"
                        firstName: "John"
                        lastName: "Doe"
                        email: "john@example.com"
                        phoneNumber: "+1234567890"
                      basicInfo:
                        title: "Cozy Downtown Apartment"
                        description: "Beautiful apartment in the heart of downtown"
                        property_type: "Entire place"
                        status: "active"
                      location:
                        address: "123 Main St"
                        city: "New York"
                        state: "NY"
                        country: "USA"
                      pricing:
                        price_per_night: 150
                        currency: "USD"
                      submittedAt: "2024-01-01T10:00:00.000Z"
                      moderationNotes: "Pending review for content compliance"
                    - _id: "prop124"
                      host_id: "user456"
                      host:
                        _id: "user456"
                        firstName: "Sarah"
                        lastName: "Johnson"
                        email: "sarah@example.com"
                        phoneNumber: "+1234567891"
                      basicInfo:
                        title: "Luxury Penthouse"
                        description: "Stunning penthouse with panoramic city views"
                        property_type: "Entire place"
                        status: "pending"
                      location:
                        address: "456 Park Ave"
                        city: "New York"
                        state: "NY"
                        country: "USA"
                      pricing:
                        price_per_night: 300
                        currency: "USD"
                      submittedAt: "2024-01-01T09:30:00.000Z"
                      moderationNotes: "Awaiting verification of amenities"
                  count: 2
                  unreadCount: 2
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingBody:
                  summary: Request body is required
                  value:
                    success: false
                    error: "Request body is required"
                invalidJSON:
                  summary: Invalid JSON in request body
                  value:
                    success: false
                    error: "Invalid JSON in request body"
                validationError:
                  summary: Validation error
                  value:
                    success: false
                    error: "Validation error: <details from Joi>"
                invalidPropertyId:
                  summary: Invalid property ID format
                  value:
                    success: false
                    error: "Invalid property ID format"
                invalidSearchParams:
                  summary: Invalid search parameters format
                  value:
                    success: false
                    error: "Invalid search parameters format"
                invalidDateRange:
                  summary: Availability start date must be before end date
                  value:
                    success: false
                    error: "Availability start date must be before end date"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to search properties"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
  /properties:
    servers:
    - url: https://fk0ojke7ka.execute-api.us-east-1.amazonaws.com/dev
      description: Properties Service
    post:
      summary: Create property
      description: Create a new property listing. Only include fields accepted from the client. Do not include _id, metadata, media, verification, ratings, analytics, hostInfo, or upload fields.
      tags: [Properties]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - host_id
                - basicInfo
                - location
                - pricing
              properties:
                host_id:
                  type: string
                  description: ID of the property host/owner
                basicInfo:
                  type: object
                  required:
                    - title
                    - description
                    - property_type
                  properties:
                    title:
                      type: string
                      minLength: 1
                      maxLength: 100
                    description:
                      type: string
                      minLength: 10
                      maxLength: 1000
                    property_type:
                      type: string
                      enum: ["Entire place", "Private room", "Shared room"]
                    status:
                      type: string
                      enum: ["active", "pending", "inactive"]
                      default: "pending"
                location:
                  type: object
                  required:
                    - address
                    - city
                    - state
                    - country
                    - coordinates
                  properties:
                    address:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    country:
                      type: string
                    zip_code:
                      type: string
                    coordinates:
                      type: object
                      required:
                        - coordinates
                      properties:
                        type:
                          type: string
                          enum: ["Point"]
                          default: "Point"
                        coordinates:
                          type: array
                          items:
                            type: number
                          minItems: 2
                          maxItems: 2
                pricing:
                  type: object
                  required:
                    - price_per_night
                    - minimum_stay
                    - maximum_stay
                  properties:
                    price_per_night:
                      type: number
                      minimum: 0
                    cleaning_fee:
                      type: number
                    service_fee:
                      type: number
                    currency:
                      type: string
                      default: "USD"
                    minimum_stay:
                      type: number
                    maximum_stay:
                      type: number
                    dynamic_pricing_enabled:
                      type: boolean
                      default: false
                    seasonal_pricing:
                      type: object
                      default: {}
                    weekly_discount:
                      type: number
                    monthly_discount:
                      type: number
                    additional_discounts:
                      type: object
                      properties:
                        early_bird:
                          type: number
                        last_minute:
                          type: number
                        referral_discount:
                          type: number
                        custom_discounts:
                          type: array
                          items:
                            type: object
                            properties:
                              code:
                                type: string
                              discount_percentage:
                                type: number
                              conditions:
                                type: object
                                properties:
                                  min_nights:
                                    type: number
                                  applicable_dates:
                                    type: array
                                    items:
                                      type: string
                                      format: date
                availability:
                  type: object
                  properties:
                    availability_calendar:
                      type: array
                      items:
                        type: string
                        format: date
                    booking_buffer:
                      type: number
                amenities:
                  type: object
                  properties:
                    wifi:
                      type: boolean
                    parking:
                      type: boolean
                    air_conditioning:
                      type: boolean
                    heating:
                      type: boolean
                    kitchen:
                      type: boolean
                    pool:
                      type: boolean
                    gym:
                      type: boolean
                    pet_friendly:
                      type: boolean
                    tv:
                      type: boolean
                    laundry:
                      type: boolean
                    smoke_detector:
                      type: boolean
                    fire_extinguisher:
                      type: boolean
                    additional_amenities:
                      type: array
                      items:
                        type: string
                rules:
                  type: object
                  properties:
                    house_rules:
                      type: string
                    maximum_guests:
                      type: number
                    minimum_age_requirement:
                      type: number
                    smoking_allowed:
                      type: boolean
                    pets_allowed:
                      type: boolean
                    events_allowed:
                      type: boolean
                bookingSettings:
                  type: object
                  properties:
                    instant_booking:
                      type: boolean
                      default: false
                    cancellation_policy:
                      type: string
                    check_in_time:
                      type: string
                    check_out_time:
                      type: string
                legal:
                  type: object
                  properties:
                    tax_id:
                      type: string
                    business_license_number:
                      type: string
                    liability_waiver_signed:
                      type: boolean
                      default: false
                additionalDetails:
                  type: object
                  properties:
                    bedrooms:
                      type: number
                    bathrooms:
                      type: number
                    beds:
                      type: number
                    square_footage:
                      type: number
                    occupancy_limit:
                      type: number
            example:
              host_id: "user123"
              basicInfo:
                title: "Cozy Downtown Apartment"
                description: "Beautiful 2-bedroom apartment in the heart of downtown with amazing city views"
                property_type: "Entire place"
                status: "pending"
              location:
                address: "123 Main Street"
                city: "New York"
                state: "NY"
                country: "USA"
                zip_code: "10001"
                coordinates:
                  type: "Point"
                  coordinates: [40.7128, -74.0060]
              pricing:
                price_per_night: 150
                minimum_stay: 2
                maximum_stay: 30
                currency: "USD"
              amenities:
                wifi: true
                parking: true
                kitchen: true
                air_conditioning: true
                additional_amenities: ["balcony", "city view"]
              rules:
                house_rules: "No smoking. No parties."
                maximum_guests: 4
                pets_allowed: false
              bookingSettings:
                instant_booking: true
                cancellation_policy: "flexible"
                check_in_time: "15:00"
                check_out_time: "11:00"
              legal:
                tax_id: "123-45-6789"
                business_license_number: "NYC-987654"
                liability_waiver_signed: true
              additionalDetails:
                bedrooms: 2
                bathrooms: 1
                beds: 2
                square_footage: 900
                occupancy_limit: 4
      responses:
        '201':
          description: Property created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Property created successfully"
                  data:
                    $ref: '#/components/schemas/Property'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingBody:
                  summary: Request body is required
                  value:
                    success: false
                    error: "Request body is required"
                invalidJSON:
                  summary: Invalid JSON in request body
                  value:
                    success: false
                    error: "Invalid JSON in request body"
                validationError:
                  summary: Validation error
                  value:
                    success: false
                    error: "Validation error: <details from Joi>"
                invalidPropertyId:
                  summary: Invalid property ID format
                  value:
                    success: false
                    error: "Invalid property ID format"
                invalidSearchParams:
                  summary: Invalid search parameters format
                  value:
                    success: false
                    error: "Invalid search parameters format"
                invalidDateRange:
                  summary: Availability start date must be before end date
                  value:
                    success: false
                    error: "Availability start date must be before end date"
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                propertyExists:
                  summary: Property already exists
                  value:
                    success: false
                    error: "Property already exists"
                emailOrPhoneInUse:
                  summary: Email or phone number is already in use
                  value:
                    success: false
                    error: "Email or phone number is already in use"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to create property"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
  /properties/{id}:
    servers:
      - url: https://fk0ojke7ka.execute-api.us-east-1.amazonaws.com/dev
        description: Properties Service
    get:
      summary: Get property by ID
      description: Retrieve a property by its ID.
      tags: [Properties]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Property ID
      responses:
        '200':
          description: Property retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      property:
                        $ref: '#/components/schemas/Property'
                      message:
                        type: string
                        example: "Property retrieved successfully"
        '400':
          description: Bad request - invalid property ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid property ID format"
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Property not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to retrieve property"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
    put:
      summary: Update property
      description: Update an existing property. Only updatable fields are allowed. Do not allow _id, metadata, or upload fields.
      tags: [Properties]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Property ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                basicInfo:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    property_type:
                      type: string
                      enum: ["Entire place", "Private room", "Shared room"]
                    status:
                      type: string
                      enum: ["active", "pending", "inactive"]
                location:
                  type: object
                  properties:
                    address:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    country:
                      type: string
                    zip_code:
                      type: string
                    coordinates:
                      type: object
                      properties:
                        type:
                          type: string
                          enum: ["Point"]
                        coordinates:
                          type: array
                          items:
                            type: number
                          minItems: 2
                          maxItems: 2
                pricing:
                  type: object
                  properties:
                    price_per_night:
                      type: number
                    cleaning_fee:
                      type: number
                    service_fee:
                      type: number
                    currency:
                      type: string
                    minimum_stay:
                      type: number
                    maximum_stay:
                      type: number
                    dynamic_pricing_enabled:
                      type: boolean
                    seasonal_pricing:
                      type: object
                    weekly_discount:
                      type: number
                    monthly_discount:
                      type: number
                    additional_discounts:
                      type: object
                      properties:
                        early_bird:
                          type: number
                        last_minute:
                          type: number
                        referral_discount:
                          type: number
                        custom_discounts:
                          type: array
                          items:
                            type: object
                            properties:
                              code:
                                type: string
                              discount_percentage:
                                type: number
                              conditions:
                                type: object
                                properties:
                                  min_nights:
                                    type: number
                                  applicable_dates:
                                    type: array
                                    items:
                                      type: string
                                      format: date
                availability:
                  type: object
                  properties:
                    availability_calendar:
                      type: array
                      items:
                        type: string
                        format: date
                    booking_buffer:
                      type: number
                amenities:
                  type: object
                  properties:
                    wifi:
                      type: boolean
                    parking:
                      type: boolean
                    air_conditioning:
                      type: boolean
                    heating:
                      type: boolean
                    kitchen:
                      type: boolean
                    pool:
                      type: boolean
                    gym:
                      type: boolean
                    pet_friendly:
                      type: boolean
                    tv:
                      type: boolean
                    laundry:
                      type: boolean
                    smoke_detector:
                      type: boolean
                    fire_extinguisher:
                      type: boolean
                    additional_amenities:
                      type: array
                      items:
                        type: string
                rules:
                  type: object
                  properties:
                    house_rules:
                      type: string
                    maximum_guests:
                      type: number
                    minimum_age_requirement:
                      type: number
                    smoking_allowed:
                      type: boolean
                    pets_allowed:
                      type: boolean
                    events_allowed:
                      type: boolean
                bookingSettings:
                  type: object
                  properties:
                    instant_booking:
                      type: boolean
                    cancellation_policy:
                      type: string
                    check_in_time:
                      type: string
                    check_out_time:
                      type: string
                legal:
                  type: object
                  properties:
                    tax_id:
                      type: string
                    business_license_number:
                      type: string
                    liability_waiver_signed:
                      type: boolean
                additionalDetails:
                  type: object
                  properties:
                    bedrooms:
                      type: number
                    bathrooms:
                      type: number
                    beds:
                      type: number
                    square_footage:
                      type: number
                    occupancy_limit:
                      type: number
            example:
              basicInfo:
                title: "Updated Cozy Downtown Apartment"
                description: "Updated description for the apartment"
                property_type: "Entire place"
                status: "active"
              pricing:
                price_per_night: 175
              amenities:
                wifi: true
                parking: true
                kitchen: true
                air_conditioning: true
                additional_amenities: ["balcony"]
      responses:
        '200':
          description: Property updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Property updated successfully"
                  data:
                    type: object
                    properties:
                      propertyId:
                        type: string
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Check-out date must be after check-in date"
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Property not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to update property"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
    delete:
      summary: Delete property
      description: Delete a property by its ID.
      tags: [Properties]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Property ID
      responses:
        '200':
          description: Property deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Property deleted successfully"
                      propertyId:
                        type: string
        '400':
          description: Bad request - invalid property ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid property ID format"
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Property not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to delete property"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
  /properties/user/{id}:
    servers:
      - url: https://fk0ojke7ka.execute-api.us-east-1.amazonaws.com/dev
        description: Properties Service
    get:
      summary: Get properties by user
      description: Retrieve all properties owned by a specific user (host).
      tags: [Properties]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User properties retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      properties:
                        type: array
                        items:
                          $ref: '#/components/schemas/Property'
                      count:
                        type: integer
                      message:
                        type: string
                        example: "Found 2 properties for user"
        '400':
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid user ID format"
        '404':
          description: No properties found for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "No properties found for this user"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to retrieve properties"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"
  /properties/{id}/images:
    servers:
      - url: https://fk0ojke7ka.execute-api.us-east-1.amazonaws.com/dev
        description: Properties Service
    post:
      summary: Upload property images
      description: Upload one or more images to a property. Only JPEG and PNG are allowed.
      tags: [Properties]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Property ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Images uploaded successfully"
                      documents:
                        type: array
                        items:
                          type: string
                        description: URLs of uploaded images
                      count:
                        type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to upload images"
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Property not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to upload images"
  /properties/{id}/documents:
    servers:
      - url: https://fk0ojke7ka.execute-api.us-east-1.amazonaws.com/dev
        description: Properties Service
    post:
      summary: Upload property documents
      description: Upload one or more PDF documents to a property.
      tags: [Properties]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Property ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Documents uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Documents uploaded successfully"
                      documents:
                        type: array
                        items:
                          $ref: '#/components/schemas/PropertyDocument'
                      count:
                        type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to upload documents"
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Property not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Failed to upload documents"

  # Bookings Service Endpoints
  # 
  # DEPLOYED ENDPOINTS (configured in serverless.yaml):
  # - POST /bookings - Create booking
  # - GET /bookings/{id} - Get booking details
  # - PUT /bookings/{id} - Update booking
  # - DELETE /bookings/{id} - Cancel booking
  # - GET /bookings/user/{id} - Get user bookings
  # - GET /bookings/host/{id} - Get host bookings
  # - GET /bookings/history/user/{id} - Get user booking history
  # - GET /bookings/history/host/{id} - Get host booking history
  #
  # NOT DEPLOYED ENDPOINTS (handlers exist but not in serverless.yaml):
  # - POST /bookings/payment-intent - Create payment intent
  # - POST /bookings/{id}/payment - Confirm payment
  # - POST /bookings/{id}/refund - Process refund
  # - GET /bookings/search - Search properties
  # - POST /bookings/webhook - Stripe webhook handler
  #
  /bookings:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    post:
      summary: Create booking
      description: |
        Create a new booking for a property. Requires authentication. The request body must include property ID, host ID, guest ID, and booking details. Returns the created booking object. The property must be available for the selected dates.
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev  
      tags: [Bookings]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [property_id, host_id, guest_id, bookingDetails]
              properties:
                property_id:
                  type: string
                  description: ID of the property being booked
                  example: "prop123"
                host_id:
                  type: string
                  description: ID of the property host
                  example: "user123"
                guest_id:
                  type: string
                  description: ID of the guest making the booking
                  example: "user456"
                bookingDetails:
                  type: object
                  required: [check_in, check_out, guests]
                  properties:
                    check_in:
                      type: string
                      format: date
                      description: Check-in date (YYYY-MM-DD)
                      example: "2024-01-15"
                    check_out:
                      type: string
                      format: date
                      description: Check-out date (YYYY-MM-DD)
                      example: "2024-01-18"
                    guests:
                      type: object
                      required: [adults]
                      properties:
                        adults:
                          type: integer
                          minimum: 1
                          description: Number of adult guests
                          example: 2
                        children:
                          type: integer
                          minimum: 0
                          default: 0
                          description: Number of children
                          example: 0
                        infants:
                          type: integer
                          minimum: 0
                          default: 0
                          description: Number of infants
                          example: 0
                    special_requests:
                      type: string
                      description: Special requests for the booking
                      example: "Early check-in if possible"
                pricing:
                  type: object
                  required: [base_price, total_amount]
                  properties:
                    base_price:
                      type: number
                      minimum: 0
                      description: Base price per night
                      example: 150
                    cleaning_fee:
                      type: number
                      minimum: 0
                      default: 0
                      description: Cleaning fee
                      example: 50
                    service_fee:
                      type: number
                      minimum: 0
                      default: 0
                      description: Service fee
                      example: 15
                    taxes:
                      type: number
                      minimum: 0
                      default: 0
                      description: Taxes
                      example: 25
                    currency:
                      type: string
                      default: "USD"
                      description: Currency code
                      example: "USD"
                    total_amount:
                      type: number
                      minimum: 0
                      description: Total booking amount
                      example: 450
            example:
              property_id: "prop123"
              host_id: "user123"
              guest_id: "user456"
              bookingDetails:
                check_in: "2024-01-15"
                check_out: "2024-01-18"
                guests:
                  adults: 2
                  children: 0
                  infants: 0
                special_requests: "Early check-in if possible"
              pricing:
                base_price: 150
                cleaning_fee: 50
                service_fee: 15
                taxes: 25
                currency: "USD"
                total_amount: 450
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking created successfully"
                      bookingData:
                        $ref: '#/components/schemas/Booking'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingBody:
                  summary: Request body is required
                  value:
                    success: false
                    error: "Request body is required"
                invalidJSON:
                  summary: Invalid JSON in request body
                  value:
                    success: false
                    error: "Invalid JSON in request body"
                validationError:
                  summary: Validation error
                  value:
                    success: false
                    error: "Validation error: Check-out date must be after check-in date"
                invalidDates:
                  summary: Invalid date format
                  value:
                    success: false
                    error: "Invalid date format for check-in or check-out"
                pastDate:
                  summary: Check-in date in past
                  value:
                    success: false
                    error: "Check-in date cannot be in the past"
                hostMismatch:
                  summary: Host ID mismatch
                  value:
                    success: false
                    error: "Host ID does not match with property host ID"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Property not found"
        '409':
          description: Property not available for selected dates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Property is not available for the selected date: 2024-01-16"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /bookings/{id}:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    get:
      summary: Get booking details
      description: |
        Retrieve detailed information for a specific booking by its ID. Requires authentication. Returns all booking details, including property, host, guest, and payment information.
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev    
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      responses:
        '200':
          description: Booking details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      booking:
                        $ref: '#/components/schemas/Booking'
                      message:
                        type: string
                        example: "Booking retrieved successfully"
        '400':
          description: Bad request - invalid booking ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid booking ID format"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Booking not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

    put:
      summary: Update booking
      description: |
        Update an existing booking by its ID. Requires authentication. Only the booking owner can update their booking. Returns the updated booking object.
        
        **Partial update:** Only include the fields you want to update in the request body. All fields are optional.
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookingRequest'
            example:
              bookingDetails:
                check_in: "2024-01-16"
                guests:
                  adults: 3
              pricing:
                base_price: 175
      responses:
        '200':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking updated successfully"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Check-out date must be after check-in date"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Booking not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

    delete:
      summary: Cancel booking
      description: |
        Cancel a booking by its ID. Requires authentication and ownership of the booking. Only the guest who made the booking can cancel it. Provide a cancellation reason in the request body. Returns the cancelled booking details and refund information if applicable.
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev    
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [cancellation_reason]
              properties:
                cancellation_reason:
                  type: string
                  description: Reason for cancellation
                  example: "Change of plans"
                cancellation_policy:
                  type: string
                  description: Cancellation policy applied
                  example: "flexible"
                cancellation_fee:
                  type: number
                  minimum: 0
                  description: Cancellation fee amount
                  example: 0
                refund_amount:
                  type: number
                  minimum: 0
                  description: Refund amount
                  example: 450
                cancelled_by:
                  type: string
                  enum: [guest, host, admin]
                  description: Who cancelled the booking
                  example: "guest"
            example:
              cancellation_reason: "Change of plans"
              cancellation_policy: "flexible"
              cancellation_fee: 0
              refund_amount: 450
              cancelled_by: "guest"
      responses:
        '200':
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking cancelled successfully"
                      bookingId:
                        type: string
                        example: "book123"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Cancellation reason is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Booking not found"
        '409':
          description: Booking already cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Booking is already cancelled"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /bookings/payment-intent:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    post:
      summary: Create payment intent
      description: |
        Create a payment intent for a booking. Requires authentication. The request body must include the booking ID, amount, and currency. Returns a client secret and payment intent ID for use with payment processing (e.g., Stripe).
      tags: [Bookings]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [booking_id, amount, currency]
              properties:
                booking_id:
                  type: string
                  description: ID of the booking
                amount:
                  type: number
                  description: Payment amount
                currency:
                  type: string
                  description: Payment currency
            example:
              booking_id: "book123"
              amount: 450
              currency: "USD"
      responses:
        '200':
          description: Payment intent created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Payment intent created successfully"
                data:
                  clientSecret: "pi_1234567890_secret_abcdefghijklmnop"
                  paymentIntentId: "pi_1234567890"
                  amount: 450
                  currency: "USD"
                  status: "requires_payment_method"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Invalid amount"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Booking not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /bookings/{id}/payment:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    post:
      summary: Process payment
      description: |
        Process a payment for a booking by its ID. Requires authentication. The request body must include a valid payment method ID. Returns the payment status and payment ID.
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [paymentMethodId]
              properties:
                paymentMethodId:
                  type: string
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Payment processed successfully"
                data:
                  paymentId: "pay123"
                  status: "succeeded"
        '400':
          description: Payment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Payment failed"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized"
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Booking not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  # Messaging Service Endpoints
  /messages:
    servers:
      - url: https://am22amgo33.execute-api.us-east-1.amazonaws.com/dev
        description: Messaging Service
    post:
      summary: Send message
      description: |
        Send a message in a conversation. If `ConversationId` is provided in the request body, the message will be added to that conversation. If `ConversationId` is omitted, a new conversation will be created automatically and the message will be added as the first message.
        
        **Behavior:**
        - If `ConversationId` is provided: Message is added to existing conversation
        - If `ConversationId` is omitted: New conversation is created with auto-generated ID
        
        **Base URL:** https://am22amgo33.execute-api.us-east-1.amazonaws.com/dev
      tags: [Messaging]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
            example:
              ConversationId: "conv123"
              message: "Hi! I'm interested in your apartment. Is it available for next weekend?"
              sentBy: "guest"
              property_id: "prop123"
              host_id: "user123"
              guest_id: "user456"
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Message sent successfully"
                data:
                  ConversationId: "conv123"
                  messageData:
                    _id: "msg123"
                    message: "Hi! I'm interested in your apartment. Is it available for next weekend?"
                    sentBy: "guest"
                    sentAt: "2024-01-01T12:00:00.000Z"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: sentBy must be one of [host, guest]"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Conversation not found"
        '409':
          description: Conversation already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Conversation already exists"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /messages/conversation/{conversationId}:
    get:
      summary: Get conversation messages
      description: |
        Retrieve all messages in a specific conversation by conversation ID.
        
        **Base URL:** https://am22amgo33.execute-api.us-east-1.amazonaws.com/dev
      tags: [Messaging]
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: ID of the conversation to retrieve messages from
          schema:
            type: string
          example: "conv123"
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  messages:
                    - _id: "msg123"
                      message: "Hi! I'm interested in your apartment."
                      sentBy: "guest"
                      sentAt: "2024-01-01T12:00:00.000Z"
                    - _id: "msg124"
                      message: "Yes, it's available for next weekend!"
                      sentBy: "host"
                      sentAt: "2024-01-01T12:05:00.000Z"
                  conversationId: "conv123"
                  messageCount: 2
        '400':
          description: Bad request - invalid conversation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Conversation ID is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Conversation not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /conversations/user/{userId}:
    get:
      summary: Get user conversations
      description: |
        Retrieve all conversations for a user by their user ID. Returns a list of conversations where the user is either the host or the guest. Messages are excluded from the response.
        
        **Base URL:** https://am22amgo33.execute-api.us-east-1.amazonaws.com/dev
      tags: [Messaging]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to get conversations for
          schema:
            type: string
          example: "user456"
      responses:
        '200':
          description: Conversations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  conversations:
                    - _id: "conv123"
                      property_id: "prop123"
                      host_id: "user123"
                      guest_id: "user456"
                      createdAt: "2024-01-01T10:00:00.000Z"
                    - _id: "conv124"
                      property_id: "prop124"
                      host_id: "user124"
                      guest_id: "user456"
                      createdAt: "2024-01-01T09:00:00.000Z"
                  count: 2
        '400':
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User ID is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: No conversations found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "No conversations found for this user"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /messages/{messageId}:
    delete:
      summary: Delete message
      description: |
        Delete a specific message from a conversation. Requires both conversation ID and message ID as path parameters.
        
        **Base URL:** https://am22amgo33.execute-api.us-east-1.amazonaws.com/dev
      tags: [Messaging]
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: query
          required: true
          description: ID of the conversation containing the message
          schema:
            type: string
          example: "conv123"
        - name: messageId
          in: path
          required: true
          description: ID of the message to delete
          schema:
            type: string
          example: "msg123"
      responses:
        '200':
          description: Message deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  message: "Message deleted successfully"
                  conversationId: "conv123"
                  messageId: "msg123"
                  remainingMessages: 4
        '400':
          description: Bad request - missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Conversation ID is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Conversation or message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Message not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  # Notifications Service Endpoints
  /notifications:
    servers:
      - url: https://z421qustb7.execute-api.us-east-1.amazonaws.com/dev
        description: Notifications Service
    get:
      summary: Get user notifications
      description: |
        Retrieve all notifications for a user by their user ID (as a query parameter). Requires authentication. Returns a list of notifications, including booking, message, payment, and system notifications. Supports pagination if implemented in the backend.
        
        **Base URL:** https://z421qustb7.execute-api.us-east-1.amazonaws.com/dev
      tags: [Notifications]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Notifications retrieved successfully"
                data:
                  notifications:
                    - _id: "notif123"
                      userId: "user456"
                      type: "booking"
                      title: "Booking Confirmed"
                      message: "Your booking for Cozy Downtown Apartment has been confirmed for January 15-18"
                      isSystemNotification: false
                      priority: "high"
                      read: false
                      metadata:
                        bookingId: "book123"
                        propertyId: "prop123"
                        checkIn: "2024-01-15"
                        checkOut: "2024-01-18"
                      createdAt: "2024-01-01T12:00:00.000Z"
                    - _id: "notif124"
                      userId: "user456"
                      type: "message"
                      title: "New Message from John"
                      message: "John sent you a message about your booking"
                      isSystemNotification: false
                      priority: "medium"
                      read: true
                      metadata:
                        conversationId: "conv123"
                        senderId: "user123"
                        senderName: "John Doe"
                      createdAt: "2024-01-01T11:30:00.000Z"
                    - _id: "notif125"
                      userId: "user456"
                      type: "payment"
                      title: "Payment Successful"
                      message: "Your payment of $450 has been processed successfully"
                      isSystemNotification: false
                      priority: "high"
                      read: false
                      metadata:
                        paymentId: "pay123"
                        amount: 450
                        currency: "USD"
                        bookingId: "book123"
                      createdAt: "2024-01-01T11:00:00.000Z"
                    - _id: "notif126"
                      userId: "user456"
                      type: "system"
                      title: "Welcome to Palmera!"
                      message: "Thank you for joining our community. Start exploring amazing properties!"
                      isSystemNotification: true
                      priority: "low"
                      read: true
                      metadata:
                        category: "welcome"
                      createdAt: "2024-01-01T10:00:00.000Z"
                  count: 4
                  unreadCount: 2
        '400':
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid user ID format"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: No notifications found for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "No notifications found for this user"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

    post:
      summary: Create notification
      description: |
        Create a new notification for a user. Requires authentication. The request body must include user ID, type, title, and message. Returns the created notification object.
        
        **Base URL:** https://z421qustb7.execute-api.us-east-1.amazonaws.com/dev
      tags: [Notifications]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationRequest'
            example:
              userId: "user456"
              type: "booking"
              title: "Booking Confirmed"
              message: "Your booking for Cozy Downtown Apartment has been confirmed for January 15-18"
              isSystemNotification: false
              priority: "high"
              metadata:
                bookingId: "book123"
                propertyId: "prop123"
                checkIn: "2024-01-15"
                checkOut: "2024-01-18"
      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Notification created successfully"
                data:
                  notification:
                    _id: "notif127"
                    userId: "user456"
                    type: "booking"
                    title: "Booking Confirmed"
                    message: "Your booking for Cozy Downtown Apartment has been confirmed for January 15-18"
                    isSystemNotification: false
                    priority: "high"
                    read: false
                    metadata:
                      bookingId: "book123"
                      propertyId: "prop123"
                      checkIn: "2024-01-15"
                      checkOut: "2024-01-18"
                    createdAt: "2024-01-01T12:00:00.000Z"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Notification title is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '409':
          description: Notification already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Notification already exists"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /notifications/{id}:
    get:
      summary: Get notification details
      description: |
        Retrieve detailed information for a specific notification by its ID. Requires authentication. Returns all notification details, including metadata and timestamps.
        
        **Base URL:** https://z421qustb7.execute-api.us-east-1.amazonaws.com/dev
      tags: [Notifications]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Notification details retrieved successfully"
                data:
                  notification:
                    _id: "notif123"
                    userId: "user456"
                    type: "booking"
                    title: "Booking Confirmed"
                    message: "Your booking for Cozy Downtown Apartment has been confirmed for January 15-18. You can view your booking details in the app."
                    isSystemNotification: false
                    priority: "high"
                    read: false
                    metadata:
                      bookingId: "book123"
                      propertyId: "prop123"
                      propertyTitle: "Cozy Downtown Apartment"
                      checkIn: "2024-01-15"
                      checkOut: "2024-01-18"
                      totalAmount: 450
                      currency: "USD"
                      hostName: "John Doe"
                    createdAt: "2024-01-01T12:00:00.000Z"
                    updatedAt: "2024-01-01T12:00:00.000Z"
        '400':
          description: Bad request - invalid notification ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid notification ID format"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Notification not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

    put:
      summary: Mark notification as read
      description: |
        Mark a notification as read by its ID. Requires authentication. Provide the read status in the request body. Returns the updated notification object.
        
        **Base URL:** https://z421qustb7.execute-api.us-east-1.amazonaws.com/dev  
      tags: [Notifications]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [read]
              properties:
                read:
                  type: boolean
                  description: Whether the notification has been read
            example:
              read: true
      responses:
        '200':
          description: Notification updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Notification marked as read"
                data:
                  notification:
                    _id: "notif123"
                    read: true
                    readAt: "2024-01-01T12:30:00.000Z"
                    updatedAt: "2024-01-01T12:30:00.000Z"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Read status is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Notification not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

    delete:
      summary: Delete notification
      description: |
        Delete a notification by its ID. Requires authentication. Returns the deleted notification ID and timestamp.
        
        **Base URL:** https://z421qustb7.execute-api.us-east-1.amazonaws.com/dev  
      tags: [Notifications]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Notification deleted successfully"
                data:
                  notificationId: "notif123"
                  deletedAt: "2024-01-01T12:00:00.000Z"
        '400':
          description: Bad request - invalid notification ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid notification ID format"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Notification not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /notifications/user/{id}:
    get:
      summary: Get user notifications by path parameter
      description: |
        Retrieve all notifications for a user by their user ID (as a path parameter). Requires authentication. Returns a list of notifications for the specified user.
        
        **Base URL:** https://z421qustb7.execute-api.us-east-1.amazonaws.com/dev
      tags: [Notifications]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User notifications retrieved successfully
        '400':
          description: Bad request - invalid user ID
        '401':
          description: Unauthorized
        '404':
          description: No notifications found for this user
        '500':
          description: Internal server error
        '503':
          description: Database connection failed

  /notifications/bulk/read:
    post:
      summary: Mark multiple notifications as read
      description: |
        Mark multiple notifications as read for a user. Requires authentication. Provide the user ID and an array of notification IDs in the request body. Returns the count of notifications marked as read.
        
        **Base URL:** https://z421qustb7.execute-api.us-east-1.amazonaws.com/dev
      tags: [Notifications]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, notificationIds]
              properties:
                userId:
                  type: string
                  description: User ID
                notificationIds:
                  type: array
                  items:
                    type: string
                  description: Array of notification IDs to mark as read
      responses:
        '200':
          description: Notifications marked as read successfully
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
        '503':
          description: Database connection failed

  # Admin Service Endpoints
  /admin/users:
    servers:
      - url: https://8u9wyib7j4.execute-api.us-east-1.amazonaws.com/dev
        description: Admin Service
    get:
      summary: Get all users (Admin only)
      description: |
        Retrieve a paginated list of all users in the system. Requires authentication and admin privileges. Returns user details, pagination info, and total user count.
        
        **Base URL:** https://8u9wyib7j4.execute-api.us-east-1.amazonaws.com/dev
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Users retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Users retrieved successfully"
                data:
                  users:
                    - _id: "user123"
                      email: "john@example.com"
                      firstName: "John"
                      lastName: "Doe"
                      role: "host"
                      status: "active"
                      phoneNumber: "+1234567890"
                      profilePicture: "https://example.com/john.jpg"
                      createdAt: "2024-01-01T00:00:00.000Z"
                      lastLogin: "2024-01-01T12:00:00.000Z"
                      propertiesCount: 3
                      bookingsCount: 15
                      rating: 4.8
                    - _id: "user456"
                      email: "sarah@example.com"
                      firstName: "Sarah"
                      lastName: "Johnson"
                      role: "user"
                      status: "active"
                      phoneNumber: "+1234567891"
                      profilePicture: "https://example.com/sarah.jpg"
                      createdAt: "2024-01-01T00:00:00.000Z"
                      lastLogin: "2024-01-01T11:30:00.000Z"
                      propertiesCount: 0
                      bookingsCount: 8
                      rating: 4.9
                    - _id: "user789"
                      email: "mike@example.com"
                      firstName: "Mike"
                      lastName: "Smith"
                      role: "admin"
                      status: "active"
                      phoneNumber: "+1234567892"
                      profilePicture: "https://example.com/mike.jpg"
                      createdAt: "2024-01-01T00:00:00.000Z"
                      lastLogin: "2024-01-01T10:00:00.000Z"
                      propertiesCount: 0
                      bookingsCount: 0
                      rating: 0
                  pagination:
                    page: 1
                    limit: 10
                    total: 150
                    totalPages: 15
                    hasNext: true
                    hasPrev: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Forbidden - Admin access required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /admin/users/{id}:
    put:
      summary: Update user (Admin only)
      description: |
        Update a user's details by their user ID. Requires authentication and admin privileges. Only an admin can update user roles or status. Returns the updated user object.
        
        **Base URL:** https://8u9wyib7j4.execute-api.us-east-1.amazonaws.com/dev
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateUserRequest'
            example:
              role: "host"
              status: "active"
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "User updated successfully"
                data:
                  user:
                    _id: "user123"
                    email: "john@example.com"
                    firstName: "John"
                    lastName: "Doe"
                    role: "host"
                    status: "active"
                    updatedAt: "2024-01-01T12:00:00.000Z"
                    updatedBy: "admin789"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Invalid role"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Forbidden - Admin access required"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /admin/properties/moderation:
    get:
      summary: Get properties for moderation (Admin only)
      description: |
        Retrieve a paginated list of properties pending moderation. Requires authentication and admin privileges. Supports filtering by status (pending, approved, rejected). Returns property details and moderation notes.
        
        **Base URL:** https://8u9wyib7j4.execute-api.us-east-1.amazonaws.com/dev
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Properties retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Properties for moderation retrieved successfully"
                data:
                  properties:
                    - _id: "prop123"
                      host_id: "user123"
                      host:
                        _id: "user123"
                        firstName: "John"
                        lastName: "Doe"
                        email: "john@example.com"
                        phoneNumber: "+1234567890"
                      basicInfo:
                        title: "Cozy Downtown Apartment"
                        description: "Beautiful apartment in the heart of downtown"
                        property_type: "Entire place"
                        status: "pending"
                      location:
                        address: "123 Main St"
                        city: "New York"
                        state: "NY"
                        country: "USA"
                      pricing:
                        price_per_night: 150
                        currency: "USD"
                      submittedAt: "2024-01-01T10:00:00.000Z"
                      moderationNotes: "Pending review for content compliance"
                    - _id: "prop124"
                      host_id: "user456"
                      host:
                        _id: "user456"
                        firstName: "Sarah"
                        lastName: "Johnson"
                        email: "sarah@example.com"
                        phoneNumber: "+1234567891"
                      basicInfo:
                        title: "Luxury Penthouse"
                        description: "Stunning penthouse with panoramic city views"
                        property_type: "Entire place"
                        status: "pending"
                      location:
                        address: "456 Park Ave"
                        city: "New York"
                        state: "NY"
                        country: "USA"
                      pricing:
                        price_per_night: 300
                        currency: "USD"
                      submittedAt: "2024-01-01T09:30:00.000Z"
                      moderationNotes: "Awaiting verification of amenities"
                  pagination:
                    page: 1
                    limit: 10
                    total: 25
                    totalPages: 3
                    hasNext: true
                    hasPrev: false
                  filters:
                    status: "pending"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Forbidden - Admin access required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /admin/properties/{id}:
    put:
      summary: Update property status (Admin only)
      description: |
        Update the moderation status of a property by its ID. Requires authentication and admin privileges. Only an admin can approve or reject properties. Provide a reason for the status change in the request body. Returns the updated property object and moderation history.
        
        **Base URL:** https://8u9wyib7j4.execute-api.us-east-1.amazonaws.com/dev
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdatePropertyRequest'
            example:
              status: "approved"
              reason: "Property meets all guidelines and requirements"
      responses:
        '200':
          description: Property status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Property status updated successfully"
                data:
                  property:
                    _id: "prop123"
                    basicInfo:
                      title: "Cozy Downtown Apartment"
                      status: "approved"
                    updatedAt: "2024-01-01T12:00:00.000Z"
                    updatedBy: "admin789"
                    moderationHistory:
                      - status: "pending"
                        reason: "Initial submission"
                        updatedAt: "2024-01-01T10:00:00.000Z"
                        updatedBy: "user123"
                      - status: "approved"
                        reason: "Property meets all guidelines and requirements"
                        updatedAt: "2024-01-01T12:00:00.000Z"
                        updatedBy: "admin789"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Invalid status"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Forbidden - Admin access required"
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Property not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

    delete:
      summary: Delete property (Admin only)
      description: |
        Delete a property by its ID. Requires authentication and admin privileges. Only an admin can delete properties. Provide a reason for deletion if applicable. Returns the deleted property ID, timestamp, and reason.
        
        **Base URL:** https://8u9wyib7j4.execute-api.us-east-1.amazonaws.com/dev
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Property deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Property deleted successfully"
                data:
                  propertyId: "prop123"
                  deletedAt: "2024-01-01T12:00:00.000Z"
                  deletedBy: "admin789"
                  reason: "Violation of community guidelines"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Forbidden - Admin access required"
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Property not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /admin/notifications/system:
    post:
      summary: Create system-wide notification (Admin only)
      description: |
        Create a system-wide notification to be sent to all users or a specific set of users. Requires authentication and admin privileges. The request body must include the notification title and message. Returns the created notification object and the count of users notified.
        
        **Base URL:** https://8u9wyib7j4.execute-api.us-east-1.amazonaws.com/dev
      tags: [Admin]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSystemNotificationRequest'
            example:
              title: "System Maintenance"
              message: "We will be performing scheduled maintenance on January 15th from 2-4 AM EST. Some features may be temporarily unavailable."
              targetUsers: ["user123", "user456", "user789"]
      responses:
        '201':
          description: System notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "System notification created successfully"
                data:
                  notification:
                    _id: "sysnotif123"
                    title: "System Maintenance"
                    message: "We will be performing scheduled maintenance on January 15th from 2-4 AM EST. Some features may be temporarily unavailable."
                    type: "system"
                    isSystemNotification: true
                    priority: "high"
                    targetUsers: ["user123", "user456", "user789"]
                    sentCount: 3
                    createdAt: "2024-01-01T12:00:00.000Z"
                    createdBy: "admin789"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Notification title is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Forbidden - Admin access required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /bookings/user/{id}:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    get:
      summary: Get user bookings
      description: |
        Retrieve all bookings for a user by their user ID. Requires authentication. Returns a list of bookings where the user is the guest.
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev      
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                      count:
                        type: integer
                        example: 2
                      message:
                        type: string
                        example: "User bookings retrieved successfully"
        '400':
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid user ID format"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: No bookings found for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "No bookings found for this user"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /bookings/host/{id}:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    get:
      summary: Get host bookings
      description: |
        Retrieve all bookings for a host by their host ID. Requires authentication. Returns a list of bookings where the user is the host.
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Host ID
      responses:
        '200':
          description: Host bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                      count:
                        type: integer
                        example: 3
                      message:
                        type: string
                        example: "Host bookings retrieved successfully"
        '400':
          description: Bad request - invalid host ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid host ID format"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: No bookings found for this host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "No booking found with this hostId"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /bookings/history/user/{id}:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    get:
      summary: Get user booking history
      description: |
        Retrieve past bookings for a user by their user ID. Requires authentication. Returns a list of completed and cancelled bookings where the user is the guest.
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User booking history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                      count:
                        type: integer
                        example: 5
                      message:
                        type: string
                        example: "User booking history retrieved successfully"
        '400':
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid user ID format"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: No past bookings found for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "No past booking found with this userId"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  /bookings/history/host/{id}:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    get:
      summary: Get host booking history
      description: |
        Retrieve past bookings for a host by their host ID. Requires authentication. Returns a list of completed and cancelled bookings where the user is the host.
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Host ID
      responses:
        '200':
          description: Host booking history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                      count:
                        type: integer
                        example: 8
                      message:
                        type: string
                        example: "Host booking history retrieved successfully"
        '400':
          description: Bad request - invalid host ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Invalid host ID format"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized - Invalid or missing token"
        '404':
          description: No past bookings found for this host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "No past booking found with this hostId"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Database connection failed"

  # Payment-related endpoints (NOT YET DEPLOYED - Development/Testing only)
  /bookings/payment-intent:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    post:
      summary: Create payment intent (NOT DEPLOYED)
      description: |
        Create a payment intent for a booking. Requires authentication. The request body must include the booking ID, amount, and currency. Returns a client secret and payment intent ID for use with payment processing (e.g., Stripe).
        
        **⚠️ NOTE: This endpoint is NOT YET DEPLOYED and is for development/testing purposes only.**
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
      tags: [Bookings]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [bookingId, amount, currency]
              properties:
                bookingId:
                  type: string
                  description: ID of the booking
                  example: "book123"
                amount:
                  type: number
                  description: Payment amount in cents
                  example: 45000
                currency:
                  type: string
                  description: Payment currency (3-letter code)
                  example: "usd"
            example:
              bookingId: "book123"
              amount: 45000
              currency: "usd"
      responses:
        '200':
          description: Payment intent created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Payment intent created successfully"
                      clientSecret:
                        type: string
                        example: "pi_1234567890_secret_abcdefghijklmnop"
                      paymentIntentId:
                        type: string
                        example: "pi_1234567890"
                      amount:
                        type: number
                        example: 45000
                      currency:
                        type: string
                        example: "usd"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation error: Invalid amount"
        '401':
          description: User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User authentication required"
        '403':
          description: Unauthorized to make payment for this booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized to make payment for this booking"
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Booking not found"
        '409':
          description: Payment intent already exists for this booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Payment intent already exists for this booking"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /bookings/{id}/payment:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    post:
      summary: Confirm payment (NOT DEPLOYED)
      description: |
        Process a payment for a booking by its ID. Requires authentication. The request body must include a valid payment method ID. Returns the payment status and payment ID.
        
        **⚠️ NOTE: This endpoint is NOT YET DEPLOYED and is for development/testing purposes only.**
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [paymentIntentId, bookingId]
              properties:
                paymentIntentId:
                  type: string
                  description: Stripe payment intent ID
                  example: "pi_1234567890"
                bookingId:
                  type: string
                  description: Booking ID
                  example: "book123"
            example:
              paymentIntentId: "pi_1234567890"
              bookingId: "book123"
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      booking:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "book123"
                          status:
                            type: string
                            example: "confirmed"
                          payment:
                            type: object
                            properties:
                              status:
                                type: string
                                example: "completed"
                              amount:
                                type: number
                                example: 45000
                              currency:
                                type: string
                                example: "usd"
        '400':
          description: Payment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Payment failed"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized"
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Booking not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  /bookings/{id}/refund:
    servers:
      - url: https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
        description: Bookings Service
    post:
      summary: Process refund (NOT DEPLOYED)
      description: |
        Process a refund for a booking by its ID. Requires authentication. The request body must include the booking ID and optionally amount and reason. Returns the refund status and details.
        
        **⚠️ NOTE: This endpoint is NOT YET DEPLOYED and is for development/testing purposes only.**
        
        **Base URL:** https://097aqk2gwf.execute-api.us-east-1.amazonaws.com/dev
      tags: [Bookings]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [bookingId]
              properties:
                bookingId:
                  type: string
                  description: ID of the booking
                  example: "book123"
                amount:
                  type: number
                  description: Refund amount (optional, full refund if not provided)
                  example: 45000
                reason:
                  type: string
                  description: Reason for refund
                  example: "Guest requested cancellation"
            example:
              bookingId: "book123"
              amount: 45000
              reason: "Guest requested cancellation"
      responses:
        '200':
          description: Refund processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      refund:
                        type: object
                        properties:
                          amount:
                            type: number
                            example: 45000
                          status:
                            type: string
                            example: "succeeded"
                      booking:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "book123"
                          status:
                            type: string
                            example: "refunded"
        '400':
          description: Refund failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Refund failed"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized"
        '403':
          description: Unauthorized to process refund for this booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Unauthorized to process refund for this booking"
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Booking not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Internal server error"

  # Additional handlers that exist but are NOT DEPLOYED
  # /bookings/search - searchPropertiesHandler.js (NOT DEPLOYED)
  # /bookings/webhook - stripeWebhookHandler.js (NOT DEPLOYED)
  # These handlers exist in the codebase but are not configured in serverless.yaml
  # and therefore are not accessible via API Gateway.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    # Common Response Schemas
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
          description: Response data (varies by endpoint)

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Detailed error message describing what went wrong"

    PaginatedResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            items:
              type: array
              description: Array of items
            pagination:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                limit:
                  type: integer
                  example: 10
                total:
                  type: integer
                  example: 100
                pages:
                  type: integer
                  example: 10

    # Authentication Schemas
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
          description: User's email address
        password:
          type: string
          minLength: 6
          example: "password123"
          description: User's password

    SignupRequest:
      type: object
      required: [email, password, firstName, lastName]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 6
          example: "password123"
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Doe"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
            user:
              $ref: '#/components/schemas/User'

    # User Schemas
    User:
      type: object
      properties:
        _id:
          type: string
          example: "user123"
          description: Unique user identifier
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phoneNumber:
          type: string
          example: "+1234567890"
        role:
          type: string
          enum: [user, host, admin]
          example: "user"
          description: User role in the system
        status:
          type: string
          enum: [active, suspended, banned]
          example: "active"
          description: User account status
        profilePicture:
          type: string
          format: uri
          example: "https://example.com/profile.jpg"
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        savedLocations:
          type: array
          items:
            $ref: '#/components/schemas/SavedLocation'
        subscription:
          $ref: '#/components/schemas/Subscription'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"

    UserPreferences:
      type: object
      properties:
        notification:
          type: object
          description: Notification preferences
          properties:
            email:
              type: boolean
              example: true
            sms:
              type: boolean
              example: false
            push:
              type: boolean
              example: true
        currency:
          type: string
          description: User's preferred currency (ISO 4217 code)
          example: "USD"
        language:
          type: string
          description: User's preferred language (ISO 639-1 code)
          example: "en"
        searchFilters:
          type: object
          description: Default search filters for the user
          properties:
            maxPrice:
              type: number
              example: 500
            propertyTypes:
              type: array
              items:
                type: string
              example: ["apartment", "house"]
            amenities:
              type: array
              items:
                type: string
              example: ["wifi", "parking"]
            distance:
              type: number
              example: 10

    SavedLocation:
      type: object
      properties:
        id:
          type: string
          example: "loc123"
        name:
          type: string
          example: "Home"
        address:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        country:
          type: string
          example: "USA"
        coordinates:
          type: object
          properties:
            lat:
              type: number
              example: 40.7128
            lng:
              type: number
              example: -74.0060
        createdAt:
          type: string
          format: date-time

    Subscription:
      type: object
      properties:
        plan:
          type: string
          enum: [free, basic, premium, enterprise]
          example: "basic"
        status:
          type: string
          enum: [active, cancelled, expired]
          example: "active"
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    # Property Schemas
    Property:
      type: object
      properties:
        _id:
          type: string
          example: "prop123"
          description: Unique property identifier
        host_id:
          type: string
          example: "user123"
          description: ID of the property host/owner
        basicInfo:
          $ref: '#/components/schemas/PropertyBasicInfo'
        location:
          $ref: '#/components/schemas/PropertyLocation'
        pricing:
          $ref: '#/components/schemas/PropertyPricing'
        amenities:
          $ref: '#/components/schemas/PropertyAmenities'
        media:
          $ref: '#/components/schemas/PropertyMedia'
        verification:
          $ref: '#/components/schemas/PropertyVerification'
        availability:
          $ref: '#/components/schemas/PropertyAvailability'
        metadata:
          $ref: '#/components/schemas/PropertyMetadata'

    PropertyBasicInfo:
      type: object
      required: [title, description, property_type]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
          example: "Cozy Downtown Apartment"
        description:
          type: string
          minLength: 10
          maxLength: 1000
          example: "Beautiful 2-bedroom apartment in the heart of downtown"
        property_type:
          type: string
          enum: ["Entire place", "Private room", "Shared room"]
          example: "Entire place"
        status:
          type: string
          enum: [active, pending, inactive]
          example: "active"
        bedrooms:
          type: integer
          minimum: 0
          example: 2
        bathrooms:
          type: integer
          minimum: 0
          example: 1
        maxGuests:
          type: integer
          minimum: 1
          example: 4

    PropertyLocation:
      type: object
      required: [address, city, state, country]
      properties:
        address:
          type: string
          example: "123 Main Street"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        country:
          type: string
          example: "USA"
        postalCode:
          type: string
          example: "10001"
        coordinates:
          type: object
          properties:
            lat:
              type: number
              example: 40.7128
            lng:
              type: number
              example: -74.0060

    PropertyPricing:
      type: object
      required: [price_per_night]
      properties:
        price_per_night:
          type: number
          minimum: 0
          example: 150.00
        currency:
          type: string
          default: "USD"
          example: "USD"
        cleaning_fee:
          type: number
          minimum: 0
          example: 50.00
        service_fee:
          type: number
          minimum: 0
          example: 15.00
        security_deposit:
          type: number
          minimum: 0
          example: 200.00

    PropertyAmenities:
      type: object
      additionalProperties:
        type: boolean
      properties:
        wifi:
          type: boolean
          example: true
        parking:
          type: boolean
          example: true
        kitchen:
          type: boolean
          example: true
        air_conditioning:
          type: boolean
          example: true
        washer:
          type: boolean
          example: true
        dryer:
          type: boolean
          example: true
        gym:
          type: boolean
          example: false
        pool:
          type: boolean
          example: false
        pet_friendly:
          type: boolean
          example: true

    PropertyMedia:
      type: object
      properties:
        photos:
          type: array
          items:
            type: string
            format: uri
          example: ["https://example.com/photo1.jpg", "https://example.com/photo2.jpg"]
        videos:
          type: array
          items:
            type: string
            format: uri
          example: ["https://example.com/video1.mp4"]

    PropertyVerification:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/PropertyDocument'
        verified:
          type: boolean
          example: false
        verificationDate:
          type: string
          format: date-time

    PropertyDocument:
      type: object
      properties:
        id:
          type: string
          example: "doc123"
        document_name:
          type: string
          example: "Property License.pdf"
        document_url:
          type: string
          format: uri
          example: "https://example.com/documents/license.pdf"
        document_type:
          type: string
          enum: [license, insurance, permit, other]
          example: "license"
        uploadedAt:
          type: string
          format: date-time

    PropertyAvailability:
      type: object
      properties:
        availability_calendar:
          type: array
          items:
            type: string
            format: date
          example: ["2024-01-15", "2024-01-16", "2024-01-17"]
        instant_bookable:
          type: boolean
          example: true
        advance_notice_hours:
          type: integer
          minimum: 0
          example: 24
        max_stay_days:
          type: integer
          minimum: 1
          example: 30

    PropertyMetadata:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        views:
          type: integer
          example: 150
        favorites:
          type: integer
          example: 25

    # Booking Schemas
    Booking:
      type: object
      required: [_id, property_id, host_id, guest_id, bookingDetails, pricing]
      properties:
        _id:
          type: string
          example: "booking123"
          description: Unique booking identifier
        property_id:
          type: string
          example: "prop123"
          description: ID of the booked property
        host_id:
          type: string
          example: "user123"
          description: ID of the property host
        guest_id:
          type: string
          example: "user456"
          description: ID of the guest
        bookingDetails:
          $ref: '#/components/schemas/BookingDetails'
        pricing:
          $ref: '#/components/schemas/Pricing'
        payment:
          $ref: '#/components/schemas/Payment'
        cancellation:
          $ref: '#/components/schemas/Cancellation'
        metadata:
          $ref: '#/components/schemas/Metadata'

    BookingDetails:
      type: object
      required: [booking_reference, check_in, check_out, total_nights, guests]
      properties:
        booking_reference:
          type: string
          description: Unique booking reference number
          example: "BK-2024-001"
        check_in:
          type: string
          format: date
          description: Check-in date
          example: "2024-01-15"
        check_out:
          type: string
          format: date
          description: Check-out date
          example: "2024-01-18"
        total_nights:
          type: integer
          minimum: 1
          description: Total number of nights
          example: 3
        guests:
          type: object
          required: [adults]
          properties:
            adults:
              type: integer
              minimum: 1
              description: Number of adult guests
              example: 2
            children:
              type: integer
              minimum: 0
              default: 0
              description: Number of children
              example: 0
            infants:
              type: integer
              minimum: 0
              default: 0
              description: Number of infants
              example: 0
        special_requests:
          type: string
          description: Special requests for the booking
          example: "Early check-in if possible"
        status:
          type: string
          enum: [pending, confirmed, cancelled, completed, no-show]
          default: "pending"
          description: Booking status
          example: "confirmed"
        booking_date:
          type: string
          format: date-time
          description: Date when booking was made
          example: "2024-01-01T10:00:00.000Z"
        last_updated:
          type: string
          format: date-time
          description: Date when booking was last updated
          example: "2024-01-01T10:00:00.000Z"
        payment:
          $ref: '#/components/schemas/Payment'

    Pricing:
      type: object
      required: [base_price, total_amount]
      properties:
        base_price:
          type: number
          minimum: 0
          description: Base price per night
          example: 150
        cleaning_fee:
          type: number
          minimum: 0
          default: 0
          description: Cleaning fee
          example: 50
        service_fee:
          type: number
          minimum: 0
          default: 0
          description: Service fee
          example: 15
        taxes:
          type: number
          minimum: 0
          default: 0
          description: Taxes
          example: 25
        deposit_amount:
          type: number
          minimum: 0
          default: 0
          description: Security deposit amount
          example: 200
        discounts:
          type: object
          properties:
            weekly_discount:
              type: number
              minimum: 0
              maximum: 100
              default: 0
              description: Weekly discount percentage
              example: 10
            monthly_discount:
              type: number
              minimum: 0
              maximum: 100
              default: 0
              description: Monthly discount percentage
              example: 15
            early_bird_discount:
              type: number
              minimum: 0
              maximum: 100
              default: 0
              description: Early bird discount percentage
              example: 5
            last_minute_discount:
              type: number
              minimum: 0
              maximum: 100
              default: 0
              description: Last minute discount percentage
              example: 8
            custom_discount:
              type: number
              minimum: 0
              maximum: 100
              default: 0
              description: Custom discount percentage
              example: 0
          default: {}
        currency:
          type: string
          default: "USD"
          description: Currency code
          example: "USD"
        total_amount:
          type: number
          minimum: 0
          description: Total booking amount
          example: 450
        platform_commission:
          type: number
          minimum: 0
          default: 0
          description: Platform commission amount
          example: 20

    Payment:
      type: object
      properties:
        stripePaymentIntentId:
          type: string
          description: Stripe payment intent ID
          example: "pi_1234567890"
        paymentIntentId:
          type: string
          description: Payment intent ID
          example: "pi_1234567890"
        amount:
          type: number
          minimum: 0
          description: Payment amount
          example: 45000
        currency:
          type: string
          minLength: 3
          maxLength: 3
          description: Payment currency (3-letter code)
          example: "USD"
        status:
          type: string
          enum: [pending, completed, failed, refunded]
          description: Payment status
          example: "completed"
        breakdown:
          type: object
          properties:
            basePrice:
              type: number
              minimum: 0
              description: Base price
              example: 450
            cleaningFee:
              type: number
              minimum: 0
              description: Cleaning fee
              example: 50
            serviceFee:
              type: number
              minimum: 0
              description: Service fee
              example: 15
            taxes:
              type: number
              minimum: 0
              description: Taxes
              example: 25
            total:
              type: number
              minimum: 0
              description: Total amount
              example: 540
        refund:
          type: object
          properties:
            amount:
              type: number
              minimum: 0
              description: Refund amount
              example: 450
            reason:
              type: string
              description: Refund reason
              example: "Guest cancellation"
            stripeRefundId:
              type: string
              description: Stripe refund ID
              example: "re_1234567890"
            processedAt:
              type: string
              format: date-time
              description: Date when refund was processed
              example: "2024-01-01T12:00:00.000Z"
        createdAt:
          type: string
          format: date-time
          description: Date when payment was created
          example: "2024-01-01T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Date when payment was last updated
          example: "2024-01-01T10:00:00.000Z"
        completedAt:
          type: string
          format: date-time
          description: Date when payment was completed
          example: "2024-01-01T11:00:00.000Z"
        details:
          type: object
          description: Additional payment details
        payment_method:
          type: string
          enum: [credit_card, paypal, stripe, bank_transfer]
          description: Payment method used
          example: "stripe"
        payment_status:
          type: string
          enum: [pending, paid, failed, refunded]
          description: Payment status
          example: "paid"
        transaction_id:
          type: string
          description: Transaction ID
          example: "txn_1234567890"
        payment_date:
          type: string
          format: date-time
          description: Date when payment was made
          example: "2024-01-01T11:00:00.000Z"
        refunded:
          type: boolean
          description: Whether payment has been refunded
          example: false
        refundedAmount:
          type: number
          minimum: 0
          description: Amount refunded
          example: 0
        refundedAt:
          type: string
          format: date-time
          description: Date when refund was processed
          example: "2024-01-01T12:00:00.000Z"
        refundReason:
          type: string
          description: Reason for refund
          example: "Guest cancellation"
        lastError:
          type: string
          description: Last error message
          example: ""
        disputed:
          type: boolean
          description: Whether payment is disputed
          example: false
        disputeDetails:
          type: object
          description: Dispute details

    Cancellation:
      type: object
      properties:
        cancellation_policy:
          type: string
          description: Cancellation policy applied
          example: "flexible"
        cancellation_reason:
          type: string
          description: Reason for cancellation
          example: "Change of plans"
        cancellation_date:
          type: string
          format: date-time
          description: Date when booking was cancelled
          example: "2024-01-01T12:00:00.000Z"
        cancellation_fee:
          type: number
          minimum: 0
          description: Cancellation fee amount
          example: 0
        refund_amount:
          type: number
          minimum: 0
          description: Refund amount
          example: 450
        cancelled_by:
          type: string
          enum: [guest, host, admin]
          description: Who cancelled the booking
          example: "guest"

    Metadata:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          description: Date when booking was created
          example: "2024-01-01T10:00:00.000Z"
        updated_at:
          type: string
          format: date-time
          description: Date when booking was last updated
          example: "2024-01-01T10:00:00.000Z"

    CreateBookingRequest:
      type: object
      required: [property_id, host_id, guest_id, bookingDetails]
      properties:
        property_id:
          type: string
          description: ID of the property being booked
          example: "prop123"
        host_id:
          type: string
          description: ID of the property host
          example: "user123"
        guest_id:
          type: string
          description: ID of the guest making the booking
          example: "user456"
        bookingDetails:
          type: object
          required: [check_in, check_out, guests]
          properties:
            check_in:
              type: string
              format: date
              description: Check-in date (YYYY-MM-DD)
              example: "2024-01-15"
            check_out:
              type: string
              format: date
              description: Check-out date (YYYY-MM-DD)
              example: "2024-01-18"
            guests:
              type: object
              required: [adults]
              properties:
                adults:
                  type: integer
                  minimum: 1
                  description: Number of adult guests
                  example: 2
                children:
                  type: integer
                  minimum: 0
                  default: 0
                  description: Number of children
                  example: 0
                infants:
                  type: integer
                  minimum: 0
                  default: 0
                  description: Number of infants
                  example: 0
            special_requests:
              type: string
              description: Special requests for the booking
              example: "Early check-in if possible"
        pricing:
          type: object
          required: [base_price, total_amount]
          properties:
            base_price:
              type: number
              minimum: 0
              description: Base price per night
              example: 150
            cleaning_fee:
              type: number
              minimum: 0
              default: 0
              description: Cleaning fee
              example: 50
            service_fee:
              type: number
              minimum: 0
              default: 0
              description: Service fee
              example: 15
            taxes:
              type: number
              minimum: 0
              default: 0
              description: Taxes
              example: 25
            currency:
              type: string
              default: "USD"
              description: Currency code
              example: "USD"
            total_amount:
              type: number
              minimum: 0
              description: Total booking amount
              example: 450

    UpdateBookingRequest:
      type: object
      description: |
        Partial update of a booking. Only include the fields you want to update. All fields are optional.
      properties:
        property_id:
          type: string
          description: ID of the property being booked
          example: "prop123"
        host_id:
          type: string
          description: ID of the property host
          example: "user123"
        guest_id:
          type: string
          description: ID of the guest making the booking
          example: "user456"
        bookingDetails:
          type: object
          description: Booking details (partial update allowed)
          properties:
            check_in:
              type: string
              format: date
              description: Check-in date (YYYY-MM-DD)
              example: "2024-01-16"
            check_out:
              type: string
              format: date
              description: Check-out date (YYYY-MM-DD)
              example: "2024-01-19"
            total_nights:
              type: integer
              minimum: 1
              description: Total number of nights
              example: 3
            guests:
              type: object
              description: Guest counts (partial update allowed)
              properties:
                adults:
                  type: integer
                  minimum: 1
                  description: Number of adult guests
                  example: 3
                children:
                  type: integer
                  minimum: 0
                  description: Number of children
                  example: 0
                infants:
                  type: integer
                  minimum: 0
                  description: Number of infants
                  example: 0
            special_requests:
              type: string
              description: Special requests for the booking
              example: "Late check-out if possible"
            status:
              type: string
              enum: [pending, confirmed, cancelled, completed, no-show]
              description: Booking status
              example: "confirmed"
            booking_date:
              type: string
              format: date-time
              description: Date when booking was made
              example: "2024-01-01T10:00:00.000Z"
            last_updated:
              type: string
              format: date-time
              description: Date when booking was last updated
              example: "2024-01-01T10:00:00.000Z"
            payment:
              $ref: '#/components/schemas/Payment'
        pricing:
          type: object
          description: Pricing details (partial update allowed)
          properties:
            base_price:
              type: number
              minimum: 0
              description: Base price per night
              example: 175
            cleaning_fee:
              type: number
              minimum: 0
              description: Cleaning fee
              example: 50
            service_fee:
              type: number
              minimum: 0
              description: Service fee
              example: 15
            taxes:
              type: number
              minimum: 0
              description: Taxes
              example: 30
            deposit_amount:
              type: number
              minimum: 0
              description: Deposit amount
              example: 0
            discounts:
              type: object
              description: Discount details
              properties:
                weekly_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Weekly discount percentage
                  example: 0
                monthly_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Monthly discount percentage
                  example: 0
                early_bird_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Early bird discount percentage
                  example: 0
                last_minute_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Last minute discount percentage
                  example: 0
                custom_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Custom discount percentage
                  example: 0
            currency:
              type: string
              description: Currency code
              example: "USD"
            total_amount:
              type: number
              minimum: 0
              description: Total booking amount
              example: 525
            platform_commission:
              type: number
              minimum: 0
              description: Platform commission
              example: 0
        payment:
          $ref: '#/components/schemas/Payment'
        cancellation:
          $ref: '#/components/schemas/Cancellation'
        metadata:
          $ref: '#/components/schemas/Metadata'

    BookingRequest:
      type: object
      required: [propertyId, checkIn, checkOut, guests]
      properties:
        propertyId:
          type: string
          example: "prop123"
        checkIn:
          type: string
          format: date
          example: "2024-01-15"
        checkOut:
          type: string
          format: date
          example: "2024-01-20"
        guests:
          type: integer
          minimum: 1
          example: 2
        specialRequests:
          type: string
          example: "Early check-in if possible"

    PaymentIntent:
      type: object
      properties:
        id:
          type: string
          example: "pi_1234567890"
        amount:
          type: integer
          example: 75000
        currency:
          type: string
          example: "usd"
        status:
          type: string
          example: "requires_payment_method"
        client_secret:
          type: string
          example: "pi_1234567890_secret_abc123"

    # Messaging Schemas
    Message:
      type: object
      properties:
        _id:
          type: string
          example: "msg123"
          description: Unique message identifier
        conversationId:
          type: string
          example: "conv123"
          description: ID of the conversation
        message:
          type: string
          minLength: 1
          maxLength: 1000
          example: "Hi, I'm interested in your property!"
        sentBy:
          type: string
          example: "user123"
          description: ID of the user who sent the message
        sentAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        read:
          type: boolean
          example: false
        readAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"

    Conversation:
      type: object
      properties:
        _id:
          type: string
          example: "conv123"
          description: Unique conversation identifier
        property_id:
          type: string
          example: "prop123"
          description: ID of the property being discussed
        host_id:
          type: string
          example: "host123"
          description: ID of the property host
        guest_id:
          type: string
          example: "guest123"
          description: ID of the guest
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        lastMessage:
          $ref: '#/components/schemas/Message'
        unreadCount:
          type: integer
          example: 3
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"

    # Notification Schemas
    Notification:
      type: object
      properties:
        _id:
          type: string
          example: "notif123"
          description: Unique notification identifier
        userId:
          type: string
          example: "user123"
          description: ID of the user receiving the notification
        type:
          type: string
          enum: [booking, message, payment, system]
          example: "booking"
          description: Type of notification
        title:
          type: string
          example: "Booking Confirmed"
        message:
          type: string
          example: "Your booking for Cozy Downtown Apartment has been confirmed"
        read:
          type: boolean
          example: false
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: "medium"
        data:
          type: object
          description: Additional data related to the notification
          properties:
            bookingId:
              type: string
              example: "booking123"
            propertyId:
              type: string
              example: "prop123"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        readAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"

    # Search and Filter Schemas
    PropertySearchFilters:
      type: object
      properties:
        location:
          type: string
          example: "New York"
          description: Search by location address
        min_price:
          type: number
          minimum: 0
          example: 100
          description: Minimum price per night
        max_price:
          type: number
          minimum: 0
          example: 200
          description: Maximum price per night
        availability_start:
          type: string
          format: date
          example: "2024-01-15"
          description: Start date for availability check
        availability_end:
          type: string
          format: date
          example: "2024-01-20"
          description: End date for availability check
        amenities:
          type: array
          items:
            type: string
          example: ["wifi", "parking"]
          description: Array of required amenities
        property_type:
          type: string
          enum: ["Entire place", "Private room", "Shared room"]
        status:
          type: string
          enum: [active, pending, inactive]
        guests:
          type: integer
          minimum: 1
          example: 2
          description: Number of guests

    # File Upload Schemas
    FileUploadResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Files uploaded successfully"
        data:
          type: object
          properties:
            files:
              type: array
              items:
                type: string
                format: uri
              example: ["https://example.com/file1.jpg", "https://example.com/file2.pdf"]
            count:
              type: integer
              example: 2

    # Admin Schemas
    AdminUserUpdate:
      type: object
      properties:
        role:
          type: string
          enum: [user, host, admin]
          example: "host"
        status:
          type: string
          enum: [active, suspended, banned]
          example: "active"
        reason:
          type: string
          example: "Account suspended for policy violation"

    AdminPropertyUpdate:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [pending, approved, rejected]
          example: "approved"
        reason:
          type: string
          example: "Property meets all requirements"

    SystemNotification:
      type: object
      required: [title, message]
      properties:
        title:
          type: string
          example: "System Maintenance"
        message:
          type: string
          example: "Scheduled maintenance on January 15th"
        targetUsers:
          type: array
          items:
            type: string
          example: ["user123", "user456"]
          description: Array of user IDs to target (optional for broadcast)

    CreatePropertyRequest:
      type: object
      required: [host_id, basicInfo, location, pricing]
      properties:
        host_id:
          type: string
          description: ID of the property host
        basicInfo:
          $ref: '#/components/schemas/PropertyBasicInfo'
        location:
          $ref: '#/components/schemas/PropertyLocation'
        pricing:
          $ref: '#/components/schemas/PropertyPricing'
        amenities:
          $ref: '#/components/schemas/PropertyAmenities'
        media:
          $ref: '#/components/schemas/PropertyMedia'
        verification:
          $ref: '#/components/schemas/PropertyVerification'
        availability:
          $ref: '#/components/schemas/PropertyAvailability'
        metadata:
          $ref: '#/components/schemas/PropertyMetadata'

    UpdatePropertyRequest:
      type: object
      required: [basicInfo, location, pricing]
      properties:
        basicInfo:
          $ref: '#/components/schemas/PropertyBasicInfo'
        location:
          $ref: '#/components/schemas/PropertyLocation'
        pricing:
          $ref: '#/components/schemas/PropertyPricing'
        amenities:
          $ref: '#/components/schemas/PropertyAmenities'
        media:
          $ref: '#/components/schemas/PropertyMedia'
        verification:
          $ref: '#/components/schemas/PropertyVerification'
        availability:
          $ref: '#/components/schemas/PropertyAvailability'
        metadata:
          $ref: '#/components/schemas/PropertyMetadata'

    CreateBookingRequest:
      type: object
      required: [property_id, host_id, guest_id, bookingDetails]
      properties:
        property_id:
          type: string
          description: ID of the property being booked
          example: "prop123"
        host_id:
          type: string
          description: ID of the property host
          example: "user123"
        guest_id:
          type: string
          description: ID of the guest making the booking
          example: "user456"
        bookingDetails:
          type: object
          required: [check_in, check_out, guests]
          properties:
            check_in:
              type: string
              format: date
              description: Check-in date (YYYY-MM-DD)
              example: "2024-01-15"
            check_out:
              type: string
              format: date
              description: Check-out date (YYYY-MM-DD)
              example: "2024-01-18"
            guests:
              type: object
              required: [adults]
              properties:
                adults:
                  type: integer
                  minimum: 1
                  description: Number of adult guests
                  example: 2
                children:
                  type: integer
                  minimum: 0
                  default: 0
                  description: Number of children
                  example: 0
                infants:
                  type: integer
                  minimum: 0
                  default: 0
                  description: Number of infants
                  example: 0
            special_requests:
              type: string
              description: Special requests for the booking
              example: "Early check-in if possible"
        pricing:
          type: object
          required: [base_price, total_amount]
          properties:
            base_price:
              type: number
              minimum: 0
              description: Base price per night
              example: 150
            cleaning_fee:
              type: number
              minimum: 0
              default: 0
              description: Cleaning fee
              example: 50
            service_fee:
              type: number
              minimum: 0
              default: 0
              description: Service fee
              example: 15
            taxes:
              type: number
              minimum: 0
              default: 0
              description: Taxes
              example: 25
            currency:
              type: string
              default: "USD"
              description: Currency code
              example: "USD"
            total_amount:
              type: number
              minimum: 0
              description: Total booking amount
              example: 450

    UpdateBookingRequest:
      type: object
      description: |
        Partial update of a booking. Only include the fields you want to update. All fields are optional.
      properties:
        property_id:
          type: string
          description: ID of the property being booked
          example: "prop123"
        host_id:
          type: string
          description: ID of the property host
          example: "user123"
        guest_id:
          type: string
          description: ID of the guest making the booking
          example: "user456"
        bookingDetails:
          type: object
          description: Booking details (partial update allowed)
          properties:
            check_in:
              type: string
              format: date
              description: Check-in date (YYYY-MM-DD)
              example: "2024-01-16"
            check_out:
              type: string
              format: date
              description: Check-out date (YYYY-MM-DD)
              example: "2024-01-19"
            total_nights:
              type: integer
              minimum: 1
              description: Total number of nights
              example: 3
            guests:
              type: object
              description: Guest counts (partial update allowed)
              properties:
                adults:
                  type: integer
                  minimum: 1
                  description: Number of adult guests
                  example: 3
                children:
                  type: integer
                  minimum: 0
                  description: Number of children
                  example: 0
                infants:
                  type: integer
                  minimum: 0
                  description: Number of infants
                  example: 0
            special_requests:
              type: string
              description: Special requests for the booking
              example: "Late check-out if possible"
            status:
              type: string
              enum: [pending, confirmed, cancelled, completed, no-show]
              description: Booking status
              example: "confirmed"
            booking_date:
              type: string
              format: date-time
              description: Date when booking was made
              example: "2024-01-01T10:00:00.000Z"
            last_updated:
              type: string
              format: date-time
              description: Date when booking was last updated
              example: "2024-01-01T10:00:00.000Z"
            payment:
              $ref: '#/components/schemas/Payment'
        pricing:
          type: object
          description: Pricing details (partial update allowed)
          properties:
            base_price:
              type: number
              minimum: 0
              description: Base price per night
              example: 175
            cleaning_fee:
              type: number
              minimum: 0
              description: Cleaning fee
              example: 50
            service_fee:
              type: number
              minimum: 0
              description: Service fee
              example: 15
            taxes:
              type: number
              minimum: 0
              description: Taxes
              example: 30
            deposit_amount:
              type: number
              minimum: 0
              description: Deposit amount
              example: 0
            discounts:
              type: object
              description: Discount details
              properties:
                weekly_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Weekly discount percentage
                  example: 0
                monthly_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Monthly discount percentage
                  example: 0
                early_bird_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Early bird discount percentage
                  example: 0
                last_minute_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Last minute discount percentage
                  example: 0
                custom_discount:
                  type: number
                  minimum: 0
                  maximum: 100
                  description: Custom discount percentage
                  example: 0
            currency:
              type: string
              description: Currency code
              example: "USD"
            total_amount:
              type: number
              minimum: 0
              description: Total booking amount
              example: 525
            platform_commission:
              type: number
              minimum: 0
              description: Platform commission
              example: 0
        payment:
          $ref: '#/components/schemas/Payment'
        cancellation:
          $ref: '#/components/schemas/Cancellation'
        metadata:
          $ref: '#/components/schemas/Metadata'

    SendMessageRequest:
      type: object
      required: [ConversationId, message, sentBy, property_id, host_id, guest_id]
      properties:
        ConversationId:
          type: string
          description: Conversation ID (optional for new conversations)
        message:
          type: string
          description: Message content
        sentBy:
          type: string
          description: ID of the user sending the message
        property_id:
          type: string
          description: ID of the property being discussed
        host_id:
          type: string
          description: ID of the property host
        guest_id:
          type: string
          description: ID of the guest

    CreateNotificationRequest:
      type: object
      required: [userId, type, title, message]
      properties:
        userId:
          type: string
          description: ID of the user to notify
        type:
          type: string
          enum: [booking, message, payment, system, reminder, alert]
          description: Type of notification
        title:
          type: string
          description: Notification title
        message:
          type: string
          description: Notification message
        isSystemNotification:
          type: boolean
          description: Whether this is a system-wide notification
          default: false
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Notification priority level
          default: "medium"
        metadata:
          type: object
          description: Additional notification metadata

    CreateSystemNotificationRequest:
      type: object
      required: [title, message]
      properties:
        title:
          type: string
          description: Notification title
        message:
          type: string
          description: Notification message
        targetUsers:
          type: array
          items:
            type: string
          description: Array of user IDs to target (optional for broadcast)

    AdminUpdateUserRequest:
      type: object
      properties:
        role:
          type: string
          enum: [user, host, admin]
          description: User role
        status:
          type: string
          enum: [active, suspended, banned]
          description: User status

    AdminUpdatePropertyRequest:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [pending, approved, rejected]
          description: Property moderation status
        reason:
          type: string
          description: Reason for status change

    UserSubscription:
      type: object
      properties:
        plan:
          type: string
          enum: [free, basic, premium, enterprise]
          example: "basic"
        status:
          type: string
          enum: [active, cancelled, expired]
          example: "active"
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

security:
  - BearerAuth: [] 